thing (clients)
 (
  English: Unicode segments
  Swift: UnicodeSegments
 )
 {
  part (unit/nowhere)
   (
    English: segments
   )
   list of (Unicode segment)
 }

action (unit)
 (
  English: Unicode segments (segments: list of (Unicode segment))
 )
 Unicode segments
 create

use
 use of (Unicode segments) as list of (Unicode scalar) indexed by (Unicode segments index)
 {
  action (clients)
   [
    test {ignore (beginning of (empty: Unicode segments))}
   ]
   (
    English: beginning of (list: Unicode segments)
   )
   Unicode segments index
   {
    let (• segment list: list of (Unicode segment)) be ((segments) of (list))
    let (• segment index: list index) be (beginning of (segment list))
    if (first in (segment list)) exists, unwrap it as (• first segment: Unicode segment), {
     ← Unicode segments index at segment (segment index), scalar (wrap (beginning of ((source) of (first segment: Unicode segment))) into optional)
    }
    ← Unicode segments index at segment (segment index), scalar (nothing: optional (Unicode scalar index))
   }

  action (clients)
   (
    English: end of (list: Unicode segments)
   )
   Unicode segments index
   {
    ← Unicode segments index at segment (end of ((segments) of (list))), scalar (nothing: optional (Unicode scalar index))
   }

  action (clients)
   [
    test {
     let (• segment list: list of (Unicode segment)) start as (empty: list of (Unicode segment))
     append (example: Unicode segment) to (↓ segment list)
     append (example: Unicode segment) to (↓ segment list)
     let (• two segments: Unicode segments) be (Unicode segments (segment list))
     let (• first offset: Unicode segments index) be (index after (beginning of (two segments)) in (two segments))
     ignore (index after (first offset) in (two segments))
    }
    test {
     let (• segment list: list of (Unicode segment)) start as (empty: list of (Unicode segment))
     append (Unicode segment at (zero: natural number) containing (Unicode text of (“  ”))) to (↓ segment list)
     let (• long segment: Unicode segments) be (Unicode segments (segment list))
     let (• first offset: Unicode segments index) be (index after (beginning of (long segment)) in (long segment))
     ignore (index after (first offset) in (long segment))
    }
   ]
   (
    English: index after (index: Unicode segments index) in (list: Unicode segments)
   )
   Unicode segments index
   {
    let (• segment list: list of (Unicode segment)) be ((segments) of (list))
    let (• segment index: list index) be ((segment) of (index))
    let (• segment: Unicode text) be ((source) of (entry at (segment index) in (segment list)))
    if ((scalar) of (index)) exists, unwrap it as (• scalar index: Unicode scalar index), {
     let (• next scalar: Unicode scalar index) be (index after (scalar index) in (segment))
     if ((next scalar) is (end of (segment))), {
      let (• next segment index: list index) be (index after (segment index) in (segment list))
      if ((next segment index) is (end of (segment list))), {
       ← Unicode segments index at segment (next segment index), scalar (nothing: optional (Unicode scalar index))
      }
      ← Unicode segments index at segment (next segment index), scalar (wrap (beginning of ((source) of (entry at (next segment index) in (segment list)))) into optional)
     }
     ← Unicode segments index at segment (segment index), scalar (wrap (next scalar) into optional)
    }
    !
   }

  action (clients)
   (
    English: entry at (index: Unicode segments index) in (list: Unicode segments)
   )
   Unicode scalar
   {
    if ((scalar) of (index)) exists, unwrap it as (• scalar index: Unicode scalar index), {
     ← entry at (scalar index) in ((source) of (entry at ((segment) of (index)) in ((segments) of (list))))
    }
    !
   }

  action (clients)
   (
    English: non‐empty example
   )
   Unicode segments
   {
    ← Unicode segments (non‐empty example: list of (Unicode segment))
   }
 }

action (clients)
 (
  English: empty
  Deutsch: leer
  français : vide
  ελληνικά: άδειος
 )
 Unicode segments
 {
  ← Unicode segments (empty: list of (Unicode segment))
 }
