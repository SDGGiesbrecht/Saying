flow (clients)
 (
  English: if (condition: truth value), (consequence: {})
  Deutsch: wenn (Bedingung: [condition]), (Folge: [consequence])
  français: si (condition: [condition]), (conséquence: [consequence])
  ελληνικά: αν (όρος: [condition]), (επακόλουθο: [consequence])
  עברית: אם (תנאי: [condition]), (תוצאה: [consequence])
 )
 C: “if ¤(28)” condition “¤(29) ¤(7B)” consequence “¤(7D)”
 C♯: “if ¤(28)” condition “¤(29) ¤(7B)” consequence “¤(7D)”
 JavaScript: “if ¤(28)” condition “¤(29) ¤(7B)” consequence “¤(7D)”
 Kotlin: “if ¤(28)” condition “¤(29) ¤(7B)” consequence “¤(7D)”
 Swift: “if ¤(28)” condition “¤(29) ¤(7B)” consequence “¤(7D)”

action
 [
  test (verify ((true) triggers if))
  test (verify (not ((false) triggers if)))
 ]
 (
  English: (condition: truth value) triggers if
 )
 truth value
 {
  if (condition), {
   ← true
  }
  ← false
 }

flow
 (
  English: nested flow (condition: truth value) (passed statements: {})
 )
 {
  if (condition), {
   passed statements
  }
 }

action
 [
  test (verify (use nested flow (true)))
  test (verify (not (use nested flow (false))))
 ]
 (
  English: use nested flow (condition: truth value)
 )
 truth value
 {
  nested flow (condition) {
   ← true
  }
  ← false
 }

flow
 (
  English: indirect if (package: optional (truth value)) exists, unwrap it as (unpacked: truth value), (stuff to do: {})
 )
 {
  if (package) is (something), unwrap it as (unpacked), {
   stuff to do
  }
 }

 action
 (
  English: use indirect if
 )
 truth value
 {
  indirect if (wrap (true) as (something)) exists, unwrap it as (• contents: truth value), {
   ← true
  }
  ← false
 }
