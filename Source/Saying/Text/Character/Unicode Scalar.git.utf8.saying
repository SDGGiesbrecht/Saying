thing (clients)
 [
  [
   English: A Unicode scalar.
  ]
  [
   English: {Unicode scalar} always preserves the exact scalar representation; it does not consider canonical or compatibility equivalence and does not apply normalization.
  ]
  test {verify ((first in (“¤(340)”)) is not (first in (“¤(300)”)))}
 ]
 (
  English: Unicode scalar
 )
 C: “gunichar” (“glib¤(2D)2.0”)
 C♯: “Rune” (“System.Text”) {“¤(23)if !NETCOREAPP3¤(5F)0¤(5F)OR¤(5F)GREATER¤(A)public readonly struct Rune¤(A){¤(A)private readonly uint ¤(5F)value;¤(A)private Rune(uint scalarValue, bool ¤(5F))¤(A){¤(A)¤(5F)value = scalarValue;¤(A)}¤(A)public static bool operator ==(Rune left, Rune right) => left.¤(5F)value == right.¤(5F)value;¤(A)public static bool operator !=(Rune left, Rune right) => left.¤(5F)value != right.¤(5F)value;¤(A)internal static Rune UnsafeCreate(uint scalarValue) => new Rune(scalarValue, false);¤(A)public static Rune GetRuneAt(string input, int index)¤(A){¤(A)uint returnValue = input[index];¤(A)if (0xD800U <= returnValue ¤(26)¤(26) returnValue < 0xDC00U)¤(A){¤(A)uint lowSurrogate = input[index + 1];¤(A)returnValue = (returnValue << 10) + lowSurrogate ¤(2D) ((0xD800U << 10) + 0xDC00U ¤(2D) (1 << 16));¤(A)}¤(A)return UnsafeCreate(returnValue);¤(A)}¤(A)}¤(A)¤(23)endif”}
 Kotlin: “Int”
 Swift: “Unicode.Scalar”
 {
 }

use (clients)
 comparison of (Unicode scalar) for equality
 {
  action (clients)
   (first: Unicode scalar) is (second: Unicode scalar)
   truth value
   C: “” first “ == ” second “”
   C♯: “” first “ == ” second “”
   JavaScript: “” first “ == ” second “”
   Kotlin: “” first “ == ” second “”
   Swift: «» first “ == ” second „“

  action (clients)
   (first: Unicode scalar) is not (second: Unicode scalar)
   truth value
   C: “” first “ != ” second “”
   C♯: “” first “ != ” second “”
   JavaScript: “” first “ != ” second “”
   Kotlin: “” first “ != ” second “”
   Swift: «» first “ != ” second „“

  action (clients)
   example
   Unicode scalar
   {
    if (first in (“ ”)) exists, unwrap it as (• space: Unicode scalar), {
     ← space
    }
    !
   }

  action (clients)
   differing example
   Unicode scalar
   {
    if (first in (“!”)) exists, unwrap it as (• exclamation mark: Unicode scalar), {
     ← exclamation mark
    }
    !
   }
 }

use (clients)
 comparison of (optional (Unicode scalar)) for equality
 {
  action (clients)
   (first: optional (Unicode scalar)) is (second: optional (Unicode scalar))
   truth value
   Kotlin: “” first “ == ” second “”
   Swift: “” first “ == ” second “”
   {
    ← (first) is (second) according to optional
   }

  action (clients)
   example
   optional (Unicode scalar)
   {
    ← wrap (example: Unicode scalar) into optional
   }

  action (clients)
   differing example
   optional (Unicode scalar)
   {
    ← wrap (differing example: Unicode scalar) into optional
   }
 }

use (clients)
 sets of (Unicode scalar)
 {
 }
