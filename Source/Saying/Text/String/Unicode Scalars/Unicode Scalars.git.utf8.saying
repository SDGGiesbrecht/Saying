thing (clients)
 [
  [
   English: An unnormalized sequence of Unicode scalars.
  ]
  [
   English: {Unicode scalars} always preserves the exact scalar representation; it does not consider canonical or compatibility equivalence and does not apply normalization.
  ]
 ]
 (
  English: Unicode scalars
 )
 C: “reference¤(5F)counted¤(5F)string¤(2A)”/“hold¤(5F)string(” string “)”/“release¤(5F)string(” string “)” (“glib¤(2D)2.0”) {“REFERENCE¤(5F)COUNTING(GString¤(2A), string, g¤(5F)string¤(5F)free, TRUE)”}
 C♯: “string”
 Kotlin: “String”
 Swift: “String.UnicodeScalarView”
 {
 }

use
 storage of (Unicode scalars)
 {
 }

action (unit)
 (
  English: ...beginning of (list: Unicode scalars)
 )
 Unicode scalar index
 C: “0”
 C♯: “0”
 JavaScript: “0”
 Kotlin: “0”
 Swift: “” list “.startIndex”

action (unit)
 (
  English: end of (list: Unicode scalars)...
 )
 Unicode scalar index
 C: “” list “¤(2D)>target¤(2D)>len”
 C♯: “” list “.Length”
 JavaScript: “” list “.length”
 Kotlin: “” list “.length”
 Swift: “” list “.endIndex”

action (unit)
 (
  English: index after (index: Unicode scalar index) in (list: Unicode scalars)...
 )
 Unicode scalar index
 C: “g¤(5F)utf8¤(5F)find¤(5F)next¤(5F)char(” list “¤(2D)>target¤(2D)>str + sizeof(gchar) ¤(2A) ” index “, ” list “¤(2D)>target¤(2D)>str + sizeof(gchar) ¤(2A) ” list “¤(2D)>target¤(2D)>len) == NULL ? ” list “¤(2D)>target¤(2D)>len : (g¤(5F)utf8¤(5F)find¤(5F)next¤(5F)char(” list “¤(2D)>target¤(2D)>str + sizeof(gchar) ¤(2A) ” index “, ” list “¤(2D)>target¤(2D)>str + sizeof(gchar) ¤(2A) ” list “¤(2D)>target¤(2D)>len) ¤(2D) ” list “¤(2D)>target¤(2D)>str) / sizeof(gchar)”
 C♯: “” list “[” index “] >= 0xD800 ¤(26)¤(26) ” list “[” index “] < 0xDC00 ? index + 2 : index + 1”
 JavaScript: “” list “[” index “] >= 0xD800 ¤(26)¤(26) ” list “[” index “] < 0xDC00 ? index + 2 : index + 1”
 Kotlin: “” list “.offsetByCodePoints(” index “, 1)”
 Swift: “” list “.index(after: ” index “)”

action (unit)
 (
  English: ...non‐empty example
 )
 Unicode scalars
 {
  ← non‐empty NFKD example
 }

action (unit)
 (
  English: non‐empty NFKD example
 )
 Unicode scalars
 C: “reference¤(5F)string(g¤(5F)string¤(5F)new(¤(22) ¤(22)))”
 C♯: “¤(22) ¤(22)”
 JavaScript: “¤(22) ¤(22)”
 Kotlin: “¤(22) ¤(22)”
 Swift: “¤(22) ¤(22).unicodeScalars”
 create

action (file)
 [
  test {
   let (• supplementary: Unicode scalars) be (example with one supplementary plane scalar)
   verify ((index after (...beginning of (supplementary)) in (supplementary)...) is (end of (supplementary)...))
  }
 ]
 (
  English: example with one supplementary plane scalar
 )
 Unicode scalars
 C: “reference¤(5F)string(g¤(5F)string¤(5F)new(¤(22)¤(10000)¤(22)))”
 C♯: “¤(22)¤(10000)¤(22)”
 JavaScript: “¤(22)¤(10000)¤(22)”
 Kotlin: “¤(22)¤(10000)¤(22)”
 Swift: “¤(22)¤(10000)¤(22).unicodeScalars”
 create
