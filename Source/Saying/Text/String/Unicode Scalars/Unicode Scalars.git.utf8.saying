thing (clients)
 [
  [
   English: An unnormalized sequence of Unicode scalars.
  ]
  [
   English: {Unicode scalars} always preserves the exact scalar representation; it does not consider canonical or compatibility equivalence and does not apply normalization.
  ]
  test {verify ((“¤(C0)”) is not (“A¤(300)”))}
  [
   English: However, literals originate in source files, which are text. As such, any tool handling the source files may change their representation. To prevent inconsistency, the compiler reads source files according to compatibility decomposition (NFKD). This means that literals can safely include NFKD scalars directly, but must use escape codes to preserve non‐NFKD scalars.
  ]
 ]
 (
  English: Unicode scalars
 )
 C: “reference¤(5F)counted¤(5F)string¤(2A)”/“hold¤(5F)string(” string “)”/“release¤(5F)string(” string “)” (“glib¤(2D)2.0”) {“REFERENCE¤(5F)COUNTING(GString¤(2A), string, g¤(5F)string¤(5F)free, TRUE)”}
 C♯: “string”
 Kotlin: “String”
 Swift: “String.UnicodeScalarView”
 {
 }

use (clients)
 general containers of (Unicode scalars)
 {
  action (clients)
   example
   Unicode scalars
   {
    ← “ ”
   }
 }

action (file)
 [
  test {verify (implementation of (“”) is (“”))}
 ]
 implementation of (first: Unicode scalars) is (second: Unicode scalars)
 truth value
 C: “g¤(5F)string¤(5F)equal(” first “¤(2D)>target, ” second “¤(2D)>target)”
 C♯: “” first “ == ” second “”
 JavaScript: “” first “ == ” second “”
 Kotlin: “” first “ == ” second “”
 Swift: “” first “.elementsEqual(” second “)”

use (clients)
 comparison of (Unicode scalars) for equality
 {
  action (clients)
   (first: Unicode scalars) is (second: Unicode scalars)
   truth value
   C: “g¤(5F)string¤(5F)equal(” first “¤(2D)>target, ” second “¤(2D)>target)”
   C♯: “” first “ == ” second “”
   JavaScript: “” first “ == ” second “”
   Kotlin: “” first “ == ” second “”
   {
    ← implementation of (first) is (second)
   }

  action (clients)
   (first: Unicode scalars) is not (second: Unicode scalars)
   truth value
   C♯: “” first “ != ” second “”
   JavaScript: “” first “ != ” second “”
   Kotlin: “” first “ != ” second “”
   Swift: “” first “ != ” second “” [“==(¤(5F): String.UnicodeScalarView, ¤(5F): String.UnicodeScalarView)”] {“extension String.UnicodeScalarView: Equatable {}”}
   {
    ← (first) is not (second) according to comparison for equality
   }

  action (clients)
   differing example
   Unicode scalars
   {
    ← “!”
   }
 }

use
 use of (Unicode scalars) as list of (Unicode scalar) indexed by (Unicode scalar index)
 {
  action (clients)
   (
    English: beginning of (list: Unicode scalars)
   )
   Unicode scalar index
   C: “0”
   C♯: “0”
   JavaScript: “0”
   Kotlin: “0”
   Swift: “” list “.startIndex”

  action (clients)
   (
    English: end of (list: Unicode scalars)
   )
   Unicode scalar index
   C: “” list “¤(2D)>target¤(2D)>len”
   C♯: “” list “.Length”
   JavaScript: “” list “.length”
   Kotlin: “” list “.length”
   Swift: “” list “.endIndex”

  action (clients)
   (
    English: advance (index: ↓ Unicode scalar index) to next in (list: Unicode scalars)
   )
   Swift: “” list “.formIndex(after: ¤(26)” index “)”
   {
    change (↓ index) to (index after (index) in (list))
   }

  action (clients)
   (
    English: index after (index: Unicode scalar index) in (list: Unicode scalars)
   )
   Unicode scalar index
   C: “g¤(5F)utf8¤(5F)find¤(5F)next¤(5F)char(” list “¤(2D)>target¤(2D)>str + sizeof(gchar) ¤(2A) ” index “, ” list “¤(2D)>target¤(2D)>str + sizeof(gchar) ¤(2A) ” list “¤(2D)>target¤(2D)>len) == NULL ? ” list “¤(2D)>target¤(2D)>len : (g¤(5F)utf8¤(5F)find¤(5F)next¤(5F)char(” list “¤(2D)>target¤(2D)>str + sizeof(gchar) ¤(2A) ” index “, ” list “¤(2D)>target¤(2D)>str + sizeof(gchar) ¤(2A) ” list “¤(2D)>target¤(2D)>len) ¤(2D) ” list “¤(2D)>target¤(2D)>str) / sizeof(gchar)”
   C♯: “0xD800 <= ” list “[” index “] ¤(26)¤(26) ” list “[” index “] < 0xDC00 ? ” index “ + 2 : ” index “ + 1”
   JavaScript: “0xD800 <= ” list “.charCodeAt(” index “) ¤(26)¤(26) ” list “.charCodeAt(” index “) < 0xDC00 ? ” index “ + 2 : ” index “ + 1”
   Kotlin: “” list “.offsetByCodePoints(” index “, 1)”
   Swift: “” list “.index(after: ” index “)”

  action (clients)
   (
    English: entry at (index: Unicode scalar index) in (list: Unicode scalars)
   )
   Unicode scalar
   C: “g¤(5F)utf8¤(5F)get¤(5F)char(” list “¤(2D)>target¤(2D)>str + sizeof(gchar) ¤(2A) ” index “)”
   C♯: “Rune.GetRuneAt(” list “, ” index “)”
   JavaScript: “” list “.codePointAt(” index “)”
   Kotlin: “” list “.codePointAt(” index “)”
   Swift: “” list “[” index “]”

  action (clients)
   (
    English: (list: Unicode scalars) is empty
   )
   truth value
   Kotlin: “” list “.isEmpty()”
   Swift: “” list “.isEmpty”
   {
    ← (list) is empty according to default use as list
   }

  action (clients)
   (
    English: (list: Unicode scalars) is not empty
   )
   truth value
   Kotlin: “” list “.isNotEmpty()”
   {
    ← (list) is not empty according to default use as list
   }

  action (clients)
   (
    English: non‐empty example
   )
   Unicode scalars
   {
    ← “ ”
   }
 }

action (clients)
 [
  [
   English: Returns a copy of the scalars normalized according to compatibility decomposition (NFKD).
  ]
  test {verify ((compatibility decomposition of (“¤(A0)”)) is (“¤(20)”))}
 ]
 (
  English: compatibility decomposition of (scalars: Unicode scalars)
 )
 Unicode scalars
 C: “reference¤(5F)string(g¤(5F)string¤(5F)copying¤(5F)and¤(5F)freeing(g¤(5F)utf8¤(5F)normalize(” scalars “¤(2D)>target¤(2D)>str, ” scalars “¤(2D)>target¤(2D)>len, G¤(5F)NORMALIZE¤(5F)ALL)))” {“GString¤(2A) g¤(5F)string¤(5F)copying¤(5F)and¤(5F)freeing(gchar¤(2A) init)¤(A){¤(A)GString¤(2A) string = g¤(5F)string¤(5F)new(init);¤(A)free(init);¤(A)return string;¤(A)}”}
 C♯: “” scalars “.Normalize(NormalizationForm.FormKD)” (
  “System”
  “System.Text”
  )
 JavaScript: “” scalars “.normalize(¤(22)NFKD¤(22))”
 Kotlin: “Normalizer.normalize(” scalars “, Normalizer.Form.NFKD)” (“java.text”)
 Swift: “String(” scalars “).decomposedStringWithCompatibilityMapping.unicodeScalars” (“Foundation”)

action (file)
 [
  test {
   let (• ASCII: Unicode scalars) be (example with one ASCII scalar)
   verify ((index after (beginning of (ASCII)) in (ASCII)) is (end of (ASCII)))
  }
 ]
 (
  English: example with one ASCII scalar
 )
 Unicode scalars
 {
  ← “ ”
 }

action (file)
 [
  test {
   let (• supplementary: Unicode scalars) be (example with one supplementary plane scalar)
   verify ((index after (beginning of (supplementary)) in (supplementary)) is (end of (supplementary)))
  }
 ]
 (
  English: example with one supplementary plane scalar
 )
 Unicode scalars
 {
  ← “¤(10000)”
 }
