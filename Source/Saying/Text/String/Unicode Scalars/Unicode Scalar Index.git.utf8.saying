thing (clients)
 [
  [
   English: A position of a Unicode scalar.
  ]
 ]
 (
  English: Unicode scalar index
 )
 C: “gsize” (“glib¤(2D)2.0”)
 C♯: “int”
 Kotlin: “Int”
 Swift: “String.UnicodeScalarView.Index”

use (clients)
 general containers of (Unicode scalar index)
 {
  action (clients)
   example
   Unicode scalar index
   {
    ← beginning of (non‐empty example: Unicode scalars)
   }
 }

use (clients)
 comparison of (Unicode scalar index) for equality
 {
  action (clients)
   (first: Unicode scalar index) is (second: Unicode scalar index)
   truth value
   C: “” first “ == ” second “”
   C♯: “” first “ == ” second “”
   JavaScript: “” first “ == ” second “”
   Kotlin: “” first “ == ” second “”
   Swift: “” first “ == ” second “”

  action (clients)
   (first: Unicode scalar index) is not (second: Unicode scalar index)
   truth value
   C: “” first “ != ” second “”
   C♯: “” first “ != ” second “”
   JavaScript: “” first “ != ” second “”
   Kotlin: “” first “ != ” second “”
   Swift: “” first “ != ” second “”

  action (clients)
   differing example
   Unicode scalar index
   {
    ← greater example
   }
 }

action (file)
 [
  test {ignore (hashing proxy of (example: Unicode scalar index))}
 ]
 hashing proxy of (index: Unicode scalar index)
 platform fixed‐width integer
 C: “(int)” index “”
 C♯: “” index “”
 JavaScript: “” index “”
 Kotlin: “” index “”
 Swift: “{var hasher = Hasher(); hasher.combine(” index “); return hasher.finalize()}()”

use (clients)
 hashing (Unicode scalar index)
 {
  action (clients)
   hash key (key: Unicode scalar index) with (hasher: ↓ hasher)
   Swift: “” key “.hash(into: ¤(26)” hasher “)”
   {
    hash part (hashing proxy of (key)) with (↓ hasher)
   }

  action (unit)
   (
    English: hash value of (key: Unicode scalar index)
   )
   hash value
   C♯: “” key “.GetHashCode()”
   Kotlin: “” key “.hashCode()”
   {
    ← hash value of (key) according to default hashing
   }
 }

use (clients)
 comparison of (Unicode scalar index) for order
 {
  action (clients)
   (first: Unicode scalar index) is less than (second: Unicode scalar index)
   truth value
   C: “” first “ < ” second “”
   C♯: “” first “ < ” second “”
   JavaScript: “” first “ < ” second “”
   Kotlin: “” first “ < ” second “”
   Swift: “” first “ < ” second “”

  action (clients)
   (first: Unicode scalar index) is greater than (second: Unicode scalar index)
   truth value
   C: “” first “ > ” second “”
   C♯: “” first “ > ” second “”
   JavaScript: “” first “ > ” second “”
   Kotlin: “” first “ > ” second “”
   Swift: “” first “ > ” second “”

  action (clients)
   (first: Unicode scalar index) is less than or equal to (second: Unicode scalar index)
   truth value
   C: “” first “ <= ” second “”
   C♯: “” first “ <= ” second “”
   JavaScript: “” first “ <= ” second “”
   Kotlin: “” first “ <= ” second “”
   Swift: “” first “ <= ” second “”

  action (clients)
   (first: Unicode scalar index) is greater than or equal to (second: Unicode scalar index)
   truth value
   C: “” first “ >= ” second “”
   C♯: “” first “ >= ” second “”
   JavaScript: “” first “ >= ” second “”
   Kotlin: “” first “ >= ” second “”
   Swift: “” first “ >= ” second “”

  action (clients)
   greater example
   Unicode scalar index
   {
    ← end of (non‐empty example: Unicode scalars)
   }
 }

use (clients)
 general containers of (optional (Unicode scalar index))
 {
  action (clients)
   example
   optional (Unicode scalar index)
   {
    ← wrap (example: Unicode scalar index) into optional
   }
 }

use (clients)
 comparison of (optional (Unicode scalar index)) for equality
 {
  action (clients)
   (first: optional (Unicode scalar index)) is (second: optional (Unicode scalar index))
   truth value
   Kotlin: “” first “ == ” second “”
   Swift: “” first “ == ” second “”
   {
    ← (first) is (second) according to optional
   }

  action (clients)
   differing example
   optional (Unicode scalar index)
   {
    ← wrap (differing example: Unicode scalar index) into optional
   }
 }
