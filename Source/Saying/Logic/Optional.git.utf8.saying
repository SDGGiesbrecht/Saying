ability (clients)
 (
  English: optional (thing)
 )
 {
 }

extension
 optional (thing)
 {
  enumeration (clients)
   (
    English: optional (thing)
   )
   Kotlin: “” thing “?”
   Swift: “” thing “?”
   {
    case
     (
      English: something
      Deutsch: etwas
      français : quelque chose
      ελληνικά: κάτι
     )
     thing
     JavaScript: “” value “”/“let resolvedOptional = ” enumeration “; if (resolvedOptional !== null) { const ” value “ = resolvedOptional; {” consequence “}}”/“” enumeration “ !== null”
     Kotlin: “” value “”/“val resolvedOptional = ” enumeration “; if (resolvedOptional != null) { val ” value “ = resolvedOptional;” consequence “}”/“” enumeration “ != null”
     Swift: “” value “ as ” thing “?”/“if let ” value “ = ” enumeration “ {” consequence “}”/“” enumeration “ != nil”

    case
     (
      English: nothing
      Deutsch: nichts
      français : rien
      ελληνικά: τίποτα
     )
     JavaScript: “null”
     Kotlin: “null”
     Swift: “nil”
   }

  use (clients)
   storage of (thing)
   {
   }

  use (clients)
   storage of (optional (thing))
   {
   }

  action (clients)
   [
    test {verify (not ((nothing: optional (thing)) exists))}
   ]
   (
    English: (thing: optional (thing)) exists
    Deutsch: (Ding: [thing]) da ist
    français : (chose: [thing]) existe
    ελληνικά: υπάρχει (πράγμα: [thing])
    עברית: יש (דבר: [thing])
   )
   truth value
   JavaScript: “” thing “ !== null”
   Kotlin: “” thing “ != null”
   Swift: “” thing “ != nil”
   {
    ← (thing) is case (something)
   }

  action (clients)
   [
    test {verify ((nothing: optional (thing)) does not exist)}
   ]
   (
    English: (thing: optional (thing)) does not exist
    Deutsch: (Ding: [thing]) nicht da ist
    français : (chose: [thing]) n’ existe pas
    ελληνικά: δεν υπάρχει (πράγμα: [thing])
    עברית: אין (דבר: [thing])
   )
   truth value
   JavaScript: “” thing “ === null”
   Kotlin: “” thing “ == null”
   Swift: “” thing “ == nil”
   {
    ← (thing) is case (nothing)
   }

  flow (clients)
   (
    English: if (optional: optional (thing)) exists, unwrap it as (unwrapped: thing), (consequence: {})
   )
   JavaScript: “let resolvedOptional = ” optional “; if (resolvedOptional !== null) { const ” unwrapped “ = resolvedOptional; {” consequence “}}”
   Kotlin: “val resolvedOptional = ” optional “; if (resolvedOptional != null) { val ” unwrapped “ = resolvedOptional” consequence “}”
   Swift: “if let ” unwrapped “ = ” optional “ {” consequence “}”
   {
    if (optional) is (something), unwrap it as (unwrapped), {
     consequence
    }
   }

  flow (clients)
   (
    English: change (storage: optional (thing)) to (value: thing)
   )
   {
    change (storage) to (wrap (value) as (something))
   }
 }

action
 [
  test {verify (not (use optional (nothing: optional (truth value))))}
  test {verify (use optional (wrap (true) as (something)))}
 ]
 (
  English: use optional (optional: optional (truth value))
 )
 truth value
 {
  if (optional) is (something), unwrap it as (• unwrapped: truth value), {
   ← unwrapped
  }
  ← false
 }
