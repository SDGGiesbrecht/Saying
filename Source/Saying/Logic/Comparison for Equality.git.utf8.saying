ability (clients)
 (
  English: comparison of (thing) for equality
  Deutsch: Vergleich von (Ding: [thing]) auf Gleichheit
  Swift: (thing: [thing]) Equatable
 )
 {
  requirement (clients)
   [
    [
     English: Compares two values for equality.
    ]
    test {verify ((example: thing) is (example: thing))}
    test {verify (((example: thing) is (differing example: thing)) is (false))}
    parameter: first
     (
      [
       English: A value.
       Deutsch: Eine Wert.
      ]
     )
    parameter: second
     (
      [
       English: Another value.
       Deutsch: Eine weitere Wert.
      ]
     )
   ]
   (
    English: (first: thing) is (second: thing)
    English +: (first: [first]) = (second: [second])
    Deutsch: (erste: [first]) ist (zweite: [second])
    Deutsch +: (erste: [first]) = (zweite: [second])
    français : (première: [first]) est (deuxième: [second])
    français +: (première: [first]) = (deuxième: [second])
    ελληνικά: (πρώτη: [first]) είναι (δεύτερα: [second])
    ελληνικά +: (πρώτη: [first]) = (δεύτερα: [second])
    עברית: (ראשון: [first]) (שני: [second])
    עברית +: (ראשון: [first]) = (שני: [second])
    Swift: == (lhs: [first]) (rhs: [second])
   )
   truth value

  choice (clients)
   [
    [
     English: Compares two values for inequality.
    ]
    test {verify ((example: thing) is not (differing example: thing))}
    test {verify (((example: thing) is not (example: thing)) is (false))}
    parameter: first
     (
      [
       English: A truth value.
       Deutsch: Eine Wahrheitswert.
      ]
     )
    parameter: second
     (
      [
       English: Another truth value.
       Deutsch: Eine weitere Wahrheitswert.
      ]
     )
   ]
   (
    English: (first: thing) is not (second: thing)
    English +: (first: [first]) ≠ (second: [second])
    Deutsch: (erste: [first]) ist nicht (zweite: [second])
    Deutsch +: (erste: [first]) ≠ (zweite: [second])
    français : (première: [first]) n’est pas (deuxième: [second])
    français +: (première: [first]) ≠ (deuxième: [second])
    ελληνικά: (πρώτη: [first]) δεν είναι (δεύτερα: [second])
    ελληνικά +: (πρώτη: [first]) ≠ (δεύτερα: [second])
    עברית: (ראשון: [first]) לא (שני: [second])
    עברית +: (ראשון: [first]) ≠ (שני: [second])
   )
   truth value
   {
    ← not ((first) is (second))
   }

  requirement (clients)
   [
    [
     English: An arbitrary example instance intended for use in tests.
    ]
   ]
   example
   thing

  requirement (clients)
   [
    [
     English: A separate example instance which differs from the main example.
    ]
   ]
   differing example
   thing
 }

extension
 comparison of (thing) for equality
 {
  use (clients)
   optional (thing)
   {
   }
 }
