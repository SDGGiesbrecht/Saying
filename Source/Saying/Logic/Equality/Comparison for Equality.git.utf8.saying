ability (clients)
 (
  English: comparison of (thing) for equality
  Deutsch: Vergleich von (Ding: [thing]) auf Gleichheit
 )
 {
  requirement (clients)
   [
    [
     English: Compares two values for equality.
    ]
    test {verify ((example: thing) is (example: thing))}
    test {verify (((example: thing) is (differing example: thing)) is (false))}
    parameter: first
     (
      [
       English: A value.
       Deutsch: Eine Wert.
      ]
     )
    parameter: second
     (
      [
       English: Another value.
       Deutsch: Eine weitere Wert.
      ]
     )
   ]
   (
    English: (first: thing) is (second: thing)
    English +: (first: [first]) = (second: [second])
    Deutsch: (erste: [first]) ist (zweite: [second])
    Deutsch +: (erste: [first]) = (zweite: [second])
    français : (première: [first]) est (deuxième: [second])
    français +: (première: [first]) = (deuxième: [second])
    ελληνικά: (πρώτη: [first]) είναι (δεύτερα: [second])
    ελληνικά +: (πρώτη: [first]) = (δεύτερα: [second])
    עברית: (ראשון: [first]) (שני: [second])
    עברית +: (ראשון: [first]) = (שני: [second])
    C♯: override (this: [first]).Equals (obj: [second])
    Kotlin: override (this: [first]).equals (other: [second])
    Swift: == (lhs: [first]) (rhs: [second])
   )
   truth value

  choice (clients)
   [
    [
     English: Compares two values for inequality.
    ]
    test {verify ((example: thing) is not (differing example: thing))}
    test {verify (((example: thing) is not (example: thing)) is (false))}
    parameter: first
     (
      [
       English: A truth value.
       Deutsch: Eine Wahrheitswert.
      ]
     )
    parameter: second
     (
      [
       English: Another truth value.
       Deutsch: Eine weitere Wahrheitswert.
      ]
     )
   ]
   (
    English: (first: thing) is not (second: thing)
    English +: (first: [first]) ≠ (second: [second])
    Deutsch: (erste: [first]) ist nicht (zweite: [second])
    Deutsch +: (erste: [first]) ≠ (zweite: [second])
    français : (première: [first]) n’est pas (deuxième: [second])
    français +: (première: [first]) ≠ (deuxième: [second])
    ελληνικά: (πρώτη: [first]) δεν είναι (δεύτερα: [second])
    ελληνικά +: (πρώτη: [first]) ≠ (δεύτερα: [second])
    עברית: (ראשון: [first]) לא (שני: [second])
    עברית +: (ראשון: [first]) ≠ (שני: [second])
   )
   truth value
   Kotlin: «» first “ != ” second „“ [“override ” thing “.equals(” thing “)”]
   Swift: “” first “ != ” second “” [“==(¤(5F): ” thing “, ¤(5F): ” thing “)”] {“extension ” thing “: Equatable {}”}
   {
    ← (first) is not (second) according to comparison for equality
   }

  requirement (clients)
   [
    test {
     let (• hasher: hasher) start as (create hasher)
     hash key (example: thing) with (↓ hasher)
    }
   ]
   (
    English: hash key (key: thing) with (hasher: ↓ hasher)
    Deutsch: Schlüssel (Schlüssel: [key]) mit (Verstreuer: [hasher]) zerhacken
    français : hacher clé (clé: [key]) avec (hacheur: [hasher])
    ελληνικά: κατατεμαχισμός κλειδί (κλειδί: [key]) με (κατακερματιστής: [hasher])
    Swift: (self: [key]).hash into (hasher: [hasher])
   )

  choice (unit)
   [
    test {ignore (hash value of (example: thing))}
   ]
   (
    English: hash value of (key: thing)
    C♯: override (this: [key]).GetHashCode
    Kotlin: override (this: [key]).hashCode
   )
   hash value
   {
    ← hash value of (key) according to comparison for equality
   }

  requirement (clients)
   [
    [
     English: A separate example instance which differs from the main example.
    ]
   ]
   differing example
   thing
 }

extension
 comparison of (thing) for equality
 {
  action (clients)
   (
    English: hash part (part: thing) with (hasher: ↓ hasher)
    Deutsch: Teil (Teil: [part]) mit (Verstreuer: [hasher]) zerhacken
    français : hacher partie (partie: [part]) avec (hacheur: [hasher])
    ελληνικά: κατατεμαχισμός μέρος (μέρος: [part]) με (κατακερματιστής: [hasher])
   )
   Swift: “” hasher “.combine(” part “)” [
     “==(¤(5F): ” thing “, ¤(5F): ” thing “)”
     “” thing “.hash(into: Hasher)”
    ] {
     “extension ” thing “: Hashable {}”
    }
   {
    hash key (part) with (↓ hasher)
   }

  action (unit)
   [
    [
     English: Forwards to an equality check.
    ]
    [
     English: This alias exists to provide a predictable name for C’s set implementation to reference. The check’s C name cannot be specified on the requirement itself, because there it might be overridden by a native fulfillment.
    ]
    test {verify (predictably named (example: thing) is (example: thing))}
   ]
   (
    English: predictably named (first: thing) is (second: thing)
    C: 1 equal (first: [first]) (second: [second])
   )
   truth value
   {
    ← (first) is (second)
   }

  action (unit)
   [
    [
     English: Forwards to a hash computation.
    ]
    [
     English: This alias exists to provide a predictable name for C’s set implementation to reference. The check’s C name cannot be specified on the requirement itself, because there it might be overridden by a native fulfillment.
    ]
    test {ignore (predictably named hash value of (example: thing))}
   ]
   (
    English: predictably named hash value of (key: thing)
    C: 1 hash (key: [key])
   )
   hash value
   {
    ← hash value of (key)
   }

  action (clients)
   [
    test {verify ((example: thing) is not (differing example: thing) according to comparison for equality)}
   ]
   (
    English: (first: thing) is not (second: thing) according to comparison for equality
   )
   truth value
   Kotlin: «» first “ != ” second „“ [“override ” thing “.equals(” thing “)”]
   Swift: “” first “ != ” second “” [“==(¤(5F): ” thing “, ¤(5F): ” thing “)”] {“extension ” thing “: Equatable {}”}
   {
    ← not ((first) is (second))
   }

  action (unit)
   (
    English: hash value of (key: thing) according to comparison for equality
   )
   hash value
   {
    let (• hasher: hasher) start as (create hasher)
    hash part (key) with (↓ hasher)
    ← final hash value from (hasher)
   }

  action (clients)
   [
    test {verify ((wrap (example: thing) into optional) is (wrap (example: thing) into optional) according to optional)}
    test {verify (not ((wrap (example: thing) into optional) is (wrap (differing example: thing) into optional) according to optional))}
    test {verify (not ((wrap (example: thing) into optional) is (nothing: optional (thing)) according to optional))}
    test {verify (not ((nothing: optional (thing)) is (wrap (example: thing) into optional) according to optional))}
    test {verify ((nothing: optional (thing)) is (nothing: optional (thing)) according to optional)}
   ]
   (
    English: (first: optional (thing)) is (second: optional (thing)) according to optional
   )
   truth value
   Kotlin: «» first “ == ” second „“ [“override ” thing “.equals(” thing “)”]
   Swift: «» first “ == ” second „“ [“==(¤(5F): ” thing “, ¤(5F): ” thing “)”] {“extension ” thing “: Equatable {}”}
   {
    if (first) exists, unwrap it as (• first value: thing), {
     if (second) exists, unwrap it as (• second value: thing), {
      ← (first value: thing) is (second value: thing)
     }
     ← false
    }
    ← (second) does not exist
   }

  action (clients)
   [
    test {verify ((wrap (example: thing) into optional) is (example: thing))}
    test {verify (not ((wrap (example: thing) into optional) is (differing example: thing)))}
    test {verify (not ((nothing: optional (thing)) is (example: thing)))}
   ]
   (
    English: (first: optional (thing)) is (second: thing)
    English +: (first: [first]) = (second: [second])
    Deutsch: (erste: [first]) ist (zweite: [second])
    Deutsch +: (erste: [first]) = (zweite: [second])
    français : (première: [first]) est (deuxième: [second])
    français +: (première: [first]) = (deuxième: [second])
    ελληνικά: (πρώτη: [first]) είναι (δεύτερα: [second])
    ελληνικά +: (πρώτη: [first]) = (δεύτερα: [second])
    עברית: (ראשון: [first]) (שני: [second])
    עברית +: (ראשון: [first]) = (שני: [second])
   )
   truth value
   Kotlin: «» first “ == ” second „“ [“override ” thing “.equals(” thing “)”]
   Swift: «» first “ == ” second „“ [“==(¤(5F): ” thing “, ¤(5F): ” thing “)”] {“extension ” thing “: Equatable {}”}
   {
    if (first) exists, unwrap it as (• first value: thing), {
     ← (first value: thing) is (second: thing)
    }
    ← false
   }

  action (clients)
   [
    test {verify ((example: thing) is (wrap (example: thing) into optional))}
    test {verify (not ((example: thing) is (wrap (differing example: thing) into optional)))}
    test {verify (not ((example: thing) is (nothing: optional (thing))))}
   ]
   (
    English: (first: thing) is (second: optional (thing))
    English +: (first: [first]) = (second: [second])
    Deutsch: (erste: [first]) ist (zweite: [second])
    Deutsch +: (erste: [first]) = (zweite: [second])
    français : (première: [first]) est (deuxième: [second])
    français +: (première: [first]) = (deuxième: [second])
    ελληνικά: (πρώτη: [first]) είναι (δεύτερα: [second])
    ελληνικά +: (πρώτη: [first]) = (δεύτερα: [second])
    עברית: (ראשון: [first]) (שני: [second])
    עברית +: (ראשון: [first]) = (שני: [second])
   )
   truth value
   Kotlin: «» first “ == ” second „“ [“override ” thing “.equals(” thing “)”]
   Swift: «» first “ == ” second „“ [“==(¤(5F): ” thing “, ¤(5F): ” thing “)”] {“extension ” thing “: Equatable {}”}
   {
    ← (second) is (first)
   }

  action (clients)
   [
    test {verify (not ((wrap (example: thing) into optional) is not (wrap (example: thing) into optional) according to optional))}
    test {verify ((wrap (example: thing) into optional) is not (wrap (differing example: thing) into optional) according to optional)}
    test {verify ((wrap (example: thing) into optional) is not (nothing: optional (thing)) according to optional)}
    test {verify ((nothing: optional (thing)) is not (wrap (example: thing) into optional) according to optional)}
    test {verify (not ((nothing: optional (thing)) is not (nothing: optional (thing)) according to optional))}
   ]
   (
    English: (first: optional (thing)) is not (second: optional (thing)) according to optional
   )
   truth value
   Kotlin: «» first “ != ” second „“ [“override ” thing “.equals(” thing “)”]
   Swift: «» first “ != ” second „“ [“==(¤(5F): ” thing “, ¤(5F): ” thing “)”] {“extension ” thing “: Equatable {}”}
   {
    ← not ((first) is (second) according to optional)
   }

  action (clients)
   [
    test {verify (not ((wrap (example: thing) into optional) is not (example: thing)))}
    test {verify ((wrap (example: thing) into optional) is not (differing example: thing))}
    test {verify ((nothing: optional (thing)) is not (example: thing))}
   ]
   (
    English: (first: optional (thing)) is not (second: thing)
    English +: (first: [first]) ≠ (second: [second])
    Deutsch: (erste: [first]) ist nicht (zweite: [second])
    Deutsch +: (erste: [first]) ≠ (zweite: [second])
    français : (première: [first]) n’est pas (deuxième: [second])
    français +: (première: [first]) ≠ (deuxième: [second])
    ελληνικά: (πρώτη: [first]) δεν είναι (δεύτερα: [second])
    ελληνικά +: (πρώτη: [first]) ≠ (δεύτερα: [second])
    עברית: (ראשון: [first]) לא (שני: [second])
    עברית +: (ראשון: [first]) ≠ (שני: [second])
   )
   truth value
   Kotlin: «» first “ != ” second „“ [“override ” thing “.equals(” thing “)”]
   Swift: «» first “ != ” second „“ [“==(¤(5F): ” thing “, ¤(5F): ” thing “)”] {“extension ” thing “: Equatable {}”}
   {
    ← not ((first) is (second))
   }

  action (clients)
   [
    test {verify (not ((example: thing) is not (wrap (example: thing) into optional)))}
    test {verify ((example: thing) is not (wrap (differing example: thing) into optional))}
    test {verify ((example: thing) is not (nothing: optional (thing)))}
   ]
   (
    English: (first: thing) is not (second: optional (thing))
    English +: (first: [first]) ≠ (second: [second])
    Deutsch: (erste: [first]) ist nicht (zweite: [second])
    Deutsch +: (erste: [first]) ≠ (zweite: [second])
    français : (première: [first]) n’est pas (deuxième: [second])
    français +: (première: [first]) ≠ (deuxième: [second])
    ελληνικά: (πρώτη: [first]) δεν είναι (δεύτερα: [second])
    ελληνικά +: (πρώτη: [first]) ≠ (δεύτερα: [second])
    עברית: (ראשון: [first]) לא (שני: [second])
    עברית +: (ראשון: [first]) ≠ (שני: [second])
   )
   truth value
   Kotlin: «» first “ != ” second „“ [“override ” thing “.equals(” thing “)”]
   Swift: «» first “ != ” second „“ [“==(¤(5F): ” thing “, ¤(5F): ” thing “)”] {“extension ” thing “: Equatable {}”}
   {
    ← (second) is not (first)
   }

  action (clients)
   [
    test {
     let (• hasher: hasher) start as (create hasher)
     hash key (wrap (example: thing) into optional) with (↓ hasher) according to optional
    }
   ]
   (
    English: hash key (key: optional (thing)) with (hasher: ↓ hasher) according to optional
   )
   Swift: “” key “.hash(into: ¤(26)” hasher “)”
   {
    if (key) exists, unwrap it as (• unwrapped: thing), {
     hash part (unwrapped) with (↓ hasher)
    }
   }
 }

thing (file)
 (
  English: minimal equality example
 )
 {
  part (file)
   (
    English: wrapped truth value
   )
   truth value
 }

action (file)
 (
  English: minimal equality example wrapping (wrapped truth value: truth value)
 )
 minimal equality example
 create

use (file)
 general containers of (minimal equality example)
 {
  action (file)
   example
   minimal equality example
   {
    ← minimal equality example wrapping (example: truth value)
   }
 }

use (file)
 comparison of (minimal equality example) for equality
 {
  action (file)
   (first: minimal equality example) is (second: minimal equality example)
   truth value
   {
    ← ((wrapped truth value) of (first)) is ((wrapped truth value) of (second))
   }

  action (file)
   hash key (key: minimal equality example) with (hasher: ↓ hasher)
   {
    hash part ((wrapped truth value) of (key)) with (↓ hasher)
   }

  action (file)
   differing example
   minimal equality example
   {
    ← minimal equality example wrapping (differing example: truth value)
   }
 }
