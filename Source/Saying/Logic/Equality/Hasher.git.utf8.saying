thing (clients)
 (
  English: hasher
  Deutsch: Verstreuer
  français : hacheur
  ελληνικά: κατακερματιστής
 )
 C: “guint” (“glib¤(2D)2.0”)
 C♯: “HashCode” (“System”) {“¤(23)if !NETCOREAPP2¤(5F)1¤(5F)OR¤(5F)GREATER¤(A)public struct HashCode¤(A){¤(A)private uint ¤(5F)v1;¤(A)public void Add<T>(T value)¤(A){¤(A)¤(5F)v1 ¤(5E)= unchecked((uint)(value?.GetHashCode() ?? 0));¤(A)}¤(A)public int ToHashCode()¤(A){¤(A)return unchecked((int)¤(5F)v1);¤(A)}¤(A)}¤(A)¤(23)endif”}
 Kotlin: “Int”
 Swift: “Hasher”
 {
 }

action (clients)
 (
  English: create hasher
 )
 hasher
 C: “0”
 C♯: “new HashCode()”
 JavaScript: “0”
 Kotlin: “0”
 Swift: “Hasher()”

use (clients)
 general use of (hasher)
 {
 }

action (unit)
 [
  test {
   let (• hasher: hasher) start as (create hasher)
   feed (hash value of (true)) into (↓ hasher)
  }
 ]
 (
  English: feed (hash: hash value) into (hasher: ↓ hasher)
 )
 C: “” hasher “ ¤(5E)= ” hash “”
 C♯: “” hasher “.Add(” hash “)”
 JavaScript: “” hasher “ ¤(5E)= ” hash “”
 Kotlin: “” hasher “ = Objects.hash(” hasher “, ” hash “)” (“java.util”)
 Swift: “” hasher “.combine(” hash “)”

action (unit)
 (
  English: final hash value from (hasher: hasher)
 )
 hash value
 C: “” hasher “”
 C♯: “” hasher “.ToHashCode()”
 JavaScript: “” hasher “”
 Kotlin: “” hasher “”
 Swift: “” hasher “.finalize()”
