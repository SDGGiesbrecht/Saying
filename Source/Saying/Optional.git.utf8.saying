ability (clients)
 (
  English: optional (thing)
 )
 {
 }

extension
 optional (thing)
 {
  enumeration (clients)
   (
    English: optional (thing)
   )
   C: “” thing “¤(2A)”
   C♯: “” thing “¤(3F)”
   Kotlin: “” thing “¤(3F)”
   Swift: “” thing “¤(3F)”
   {
    case
     (
      English: none
      Deutsch: keiner
      français : aucun
      ελληνικά: κανένας
     )
     C: “¤(28)NULL¤(29)” (stddef)
     C♯: “¤(28)null¤(29)”
     JavaScript: “¤(28)null¤(29)”
     Kotlin: “¤(28)null¤(29)”
     Swift: “¤(28)nil¤(29)”
   }

  use (clients)
   storage of (optional (thing))
   {
   }

  action (clients)
   [
    test (verify (not ((none) exists)))
   ]
   (
    English: (thing: optional (thing)) exists
    Deutsch: (Ding: [thing]) da ist
    français : (chose: [thing]) existe
    ελληνικά: υπάρχει (πράγμα: [thing])
    עברית: יש (דבר: [thing])
   )
   truth value
   C: “¤(28)” thing “¤(29) ¤(21)= NULL” (stddef)
   C♯: “¤(28)” thing “¤(29) ¤(21)= null”
   JavaScript: “¤(28)” thing “¤(29) ¤(21)== null”
   Kotlin: “¤(28)” thing “¤(29) ¤(21)= null”
   Swift: “¤(28)” thing “¤(29) ¤(21)= nil”

  action (clients)
   [
    test (verify ((none) does not exist))
   ]
   (
    English: (thing: optional (thing)) does not exist
    Deutsch: (Ding: [thing]) nicht da ist
    français : (chose: [thing]) n’ existe pas
    ελληνικά: δεν υπάρχει (πράγμα: [thing])
    עברית: אין (דבר: [thing])
   )
   truth value
   C: “¤(28)” thing “¤(29) == NULL” (stddef)
   C♯: “¤(28)” thing “¤(29) == null”
   JavaScript: “¤(28)” thing “¤(29) === null”
   Kotlin: “¤(28)” thing “¤(29) == null”
   Swift: “¤(28)” thing “¤(29) == nil”

  flow (clients)
   (
    English: if (optional: optional (thing)) exists, unwrap it as (unwrapped: thing), (consequence: {})
   )
   C: “if ¤(28)” optional “¤(29) ¤(7B) ” thing “ ” unwrapped “ = ¤(2A)” optional “; ” consequence “¤(7D)”
   C♯: “if ¤(28)” optional “ is ” thing “ ” unwrapped “¤(29) ¤(7B)” consequence “¤(7D)”
   JavaScript: “let ” unwrapped “ = ¤(28)” optional “¤(29); if ¤(28)” unwrapped “ ¤(21)== null¤(29) ¤(7B)” consequence “¤(7D)”
   Kotlin: “val ” unwrapped “ = ¤(28)” optional “¤(29); if ¤(28)” unwrapped “ ¤(21)= null¤(29) ¤(7B)” consequence “¤(7D)”
   Swift: “if let ” unwrapped “ = ¤(28)” optional “¤(29) ¤(7B)” consequence “¤(7D)”
 }

action
 [
  test (verify (accept optional (optional true value)))
 ]
 (
  English: accept optional (thing: optional (truth value))
 )
 truth value
 {
  ← true
 }

action
 (
  English: optional true value
 )
 optional (truth value)
 C: “¤(28)¤(28)bool¤(2A)¤(29) ¤(22)1¤(22)¤(29)” (stdbool)
 C♯: “¤(28)true¤(29)”
 JavaScript: “¤(28)true¤(29)”
 Kotlin: “¤(28)true¤(29)”
 Swift: “¤(28)true¤(29)”

action
 [
  test (verify (unwrapping (optional true value) works))
  test (verify (not (unwrapping (none) works)))
 ]
 (
  English: unwrapping (optional: optional (truth value)) works
 )
 truth value
 {
  if (optional) exists, unwrap it as (• unwrapped: truth value), {
   ← unwrapped
  }
  ← false
 }

action
 [
  test (verify (using optional storage works))
 ]
 (
  English: using optional storage works
 )
 truth value
 {
  let (• storage: optional (truth value)) start as (optional true value)
  change (storage) to (none)
  ← (storage) does not exist
 }
