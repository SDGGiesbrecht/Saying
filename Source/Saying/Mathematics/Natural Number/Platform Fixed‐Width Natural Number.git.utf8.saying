thing (clients)
 [
  [
   English: A natural number stored in a fixed amound of memory.
  ]
  [
   English: It is generally recommended to use the simpler {natural number} and {integer} instead.
  ]
  [
   English: As fixed‐width representations, {platform fixed‐width natural number} and {platform fixed‐width integer} can be more efficiently processed and stored, but they can only represent a limited number of values. Using them requires consideration of overflow.
  ]
  [
   English: The actual size of {platform fixed‐width natural number} and {platform fixed‐width integer} are determined by each platform’s individual recommendation.
  ]
 ]
 (
  English: platform fixed‐width natural number
 )
 C: “unsigned”
 C♯: “uint”
 Kotlin: “UInt”
 Swift: “UInt”

use (clients)
 comparison of (platform fixed‐width natural number) for equality
 {
  action (clients)
   (first: platform fixed‐width natural number) is (second: platform fixed‐width natural number)
   truth value
   C: “¤(28)” first “ == ” second “¤(29)”
   C♯: “¤(28)” first “ == ” second “¤(29)”
   JavaScript: “¤(28)” first “ == ” second “¤(29)”
   Kotlin: “¤(28)” first “ == ” second “¤(29)”
   Swift: «¤(28)» first “ == ” second „¤(29)“

  action (clients)
   (first: platform fixed‐width natural number) is not (second: platform fixed‐width natural number)
   truth value
   C: “¤(28)” first “ ¤(21)= ” second “¤(29)”
   C♯: “¤(28)” first “ ¤(21)= ” second “¤(29)”
   JavaScript: “¤(28)” first “ ¤(21)= ” second “¤(29)”
   Kotlin: “¤(28)” first “ ¤(21)= ” second “¤(29)”
   Swift: «¤(28)» first “ ¤(21)= ” second „¤(29)“

  action (clients)
   example
   platform fixed‐width natural number
   C: “1”
   C♯: “1”
   JavaScript: “1”
   Kotlin: “1u”
   Swift: “1”

  action (clients)
   differing example
   platform fixed‐width natural number
   C: “2”
   C♯: “2”
   JavaScript: “2”
   Kotlin: “2u”
   Swift: “2”
 }
