thing (clients)
 [
  [
   English: A natural number; 0, 1, 2, 3 or any number that follows in that sequence.
  ]
  [
   English: {natural number} and {integer} are the generally recommended representations to use for numbers. They most closely match the mathematical concepts, prioritizing reliability over efficiency. They are expected to be used as though they could hypothetically hold any relevant number with exact precision, regardless of size.
  ]
  [
   English: In practice, storage of a number is still bound by the physical limits of the device. If the platform runs out of resources, code execution will fail in some manner.
  ]
  [
   English: Where speed or memory size becomes a concern, fixed‐width numbers can be used instead, provided values are known to remain within their representable range.
  ]
 ]
 (
  español: número natural
  English: natural number
  العربية: عدد طبيعي
  हिन्दी: प्राकृतिक संख्या
  português: número natural
  русский: натуральное число
  Deutsch: natürliche Zahl
  tiếng Việt: số tự nhiên
  한국어: 자연수
  français : entier naturel
  Türkçe: doğal sayı
  italiano: numero naturale
  polski: liczba naturalna
  українська: натуральне число
  Nederlands: natuurlijk getal
  română: număr natural
  ελληνικά: φυσικός αριθμός
  čeština: přirozené číslo
  magyar: természetes szám
  svenska: naturligt tal
  Afrikaans: natuurlike getal
  dansk: naturligt tal
  suomi: luonnollinen luku
  slovenčina: prirodzené číslo
  עברית: מספר טבעי
  norsk: naturlig tall
  català: nombre natural
  Gaeilge: uimhir aiceanta
 )
 C: “uintmax¤(5F)t” (“stdint”)
 C♯: “ulong”
 Kotlin: “ULong”
 Swift: “UInt64”

use (clients)
 comparison of (natural number) for equality
 {
  action (clients)
   (first: natural number) is (second: natural number)
   truth value
   C: “¤(28)” first “ == ” second “¤(29)”
   C♯: “¤(28)” first “ == ” second “¤(29)”
   JavaScript: “¤(28)” first “ == ” second “¤(29)”
   Kotlin: “¤(28)” first “ == ” second “¤(29)”
   Swift: «¤(28)» first “ == ” second „¤(29)“

  action (clients)
   (first: natural number) is not (second: natural number)
   truth value
   C: “¤(28)” first “ ¤(21)= ” second “¤(29)”
   C♯: “¤(28)” first “ ¤(21)= ” second “¤(29)”
   JavaScript: “¤(28)” first “ ¤(21)= ” second “¤(29)”
   Kotlin: “¤(28)” first “ ¤(21)= ” second “¤(29)”
   Swift: «¤(28)» first “ ¤(21)= ” second „¤(29)“

  action (clients)
   example
   natural number
   {
    ← zero
   }

  action (clients)
   differing example
   natural number
   {
    ← greater example
   }
 }

use (clients)
 comparison of (natural number) for order
 {
  action (clients)
   (first: natural number) is less than (second: natural number)
   truth value
   C: “¤(28)” first “ < ” second “¤(29)”
   C♯: “¤(28)” first “ < ” second “¤(29)”
   JavaScript: “¤(28)” first “ < ” second “¤(29)”
   Kotlin: “¤(28)” first “ < ” second “¤(29)”
   Swift: «¤(28)» first “ < ” second „¤(29)“

  action (clients)
   (first: natural number) is greater than (second: natural number)
   truth value
   C: “¤(28)” first “ > ” second “¤(29)”
   C♯: “¤(28)” first “ > ” second “¤(29)”
   JavaScript: “¤(28)” first “ > ” second “¤(29)”
   Kotlin: “¤(28)” first “ > ” second “¤(29)”
   Swift: «¤(28)» first “ > ” second „¤(29)“

  action (clients)
   (first: natural number) is less than or equal to (second: natural number)
   truth value
   C: “¤(28)” first “ <= ” second “¤(29)”
   C♯: “¤(28)” first “ <= ” second “¤(29)”
   JavaScript: “¤(28)” first “ <= ” second “¤(29)”
   Kotlin: “¤(28)” first “ <= ” second “¤(29)”
   Swift: «¤(28)» first “ <= ” second „¤(29)“

  action (clients)
   (first: natural number) is greater than or equal to (second: natural number)
   truth value
   C: “¤(28)” first “ >= ” second “¤(29)”
   C♯: “¤(28)” first “ >= ” second “¤(29)”
   JavaScript: “¤(28)” first “ >= ” second “¤(29)”
   Kotlin: “¤(28)” first “ >= ” second “¤(29)”
   Swift: «¤(28)» first “ >= ” second „¤(29)“

  action (clients)
   greater example
   natural number
   {
    ← one
   }
 }

use (clients)
 additive arithmetic with (natural number)
 {
  action (clients)
   (
    English: zero
   )
   natural number
   C: “0”
   C♯: “0”
   JavaScript: “0”
   Kotlin: “0uL”
   Swift: “0”

  action (clients)
   (
    English: one
   )
   natural number
   C: “1”
   C♯: “1”
   JavaScript: “1”
   Kotlin: “1uL”
   Swift: “1”
 }
