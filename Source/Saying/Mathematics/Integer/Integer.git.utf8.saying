thing (clients)
 [
  [
   English: An integer; a natural number or a negation thereof.
  ]
  [
   English: {integer} makes the same design tradeoffs as {natural number}. See {natural number} for more information.
  ]
 ]
 (
  español: número entero
  English: integer
  العربية: عدد صحيح
  हिन्दी: पूर्णांक
  português: número inteiro
  русский: целое число
  Deutsch: ganze Zahl
  tiếng Việt: số nguyên
  한국어: 정수
  français : entier relatif
  Türkçe: tam sayı
  italiano: numero intero
  polski: liczba całkowita
  українська: ціле число
  Nederlands: geheel getal
  română: număr întreg
  ελληνικά: ακέραιος αριθμός
  čeština: celé číslo
  magyar: egész szám
  svenska: heltal
  Afrikaans: heelgetal
  dansk: heltal
  suomi: kokonaisluku
  slovenčina: celé číslo
  עברית: מספר שלם
  norsk: heltall
  català: nombre enter
  Gaeilge: slánuimhir
 )
 C: “intmax¤(5F)t” (“stdint”)
 C♯: “long”
 Kotlin: “Long”
 Swift: “Int64”

use (clients)
 comparison of (integer) for equality
 {
  action (clients)
   (first: integer) is (second: integer)
   truth value
   C: “¤(28)” first “ == ” second “¤(29)”
   C♯: “¤(28)” first “ == ” second “¤(29)”
   JavaScript: “¤(28)” first “ == ” second “¤(29)”
   Kotlin: “¤(28)” first “ == ” second “¤(29)”
   Swift: «¤(28)» first “ == ” second „¤(29)“

  action (clients)
   (first: integer) is not (second: integer)
   truth value
   C: “¤(28)” first “ ¤(21)= ” second “¤(29)”
   C♯: “¤(28)” first “ ¤(21)= ” second “¤(29)”
   JavaScript: “¤(28)” first “ ¤(21)= ” second “¤(29)”
   Kotlin: “¤(28)” first “ ¤(21)= ” second “¤(29)”
   Swift: «¤(28)» first “ ¤(21)= ” second „¤(29)“

  action (clients)
   example
   integer
   {
    ← zero
   }

  action (clients)
   differing example
   integer
   {
    ← greater example
   }
 }

use (clients)
 comparison of (integer) for order
 {
  action (clients)
   (first: integer) is less than (second: integer)
   truth value
   C: “¤(28)” first “ < ” second “¤(29)”
   C♯: “¤(28)” first “ < ” second “¤(29)”
   JavaScript: “¤(28)” first “ < ” second “¤(29)”
   Kotlin: “¤(28)” first “ < ” second “¤(29)”
   Swift: «¤(28)» first “ < ” second „¤(29)“

  action (clients)
   (first: integer) is greater than (second: integer)
   truth value
   C: “¤(28)” first “ > ” second “¤(29)”
   C♯: “¤(28)” first “ > ” second “¤(29)”
   JavaScript: “¤(28)” first “ > ” second “¤(29)”
   Kotlin: “¤(28)” first “ > ” second “¤(29)”
   Swift: «¤(28)» first “ > ” second „¤(29)“

  action (clients)
   (first: integer) is less than or equal to (second: integer)
   truth value
   C: “¤(28)” first “ <= ” second “¤(29)”
   C♯: “¤(28)” first “ <= ” second “¤(29)”
   JavaScript: “¤(28)” first “ <= ” second “¤(29)”
   Kotlin: “¤(28)” first “ <= ” second “¤(29)”
   Swift: «¤(28)» first “ <= ” second „¤(29)“

  action (clients)
   (first: integer) is greater than or equal to (second: integer)
   truth value
   C: “¤(28)” first “ >= ” second “¤(29)”
   C♯: “¤(28)” first “ >= ” second “¤(29)”
   JavaScript: “¤(28)” first “ >= ” second “¤(29)”
   Kotlin: “¤(28)” first “ >= ” second “¤(29)”
   Swift: «¤(28)» first “ >= ” second „¤(29)“

  action (clients)
   greater example
   integer
   {
    ← one
   }
 }

use (clients)
 addition of (integer)
 {
  action (clients)
   (
    English: add (addend: integer) to (cumulative sum: ↓ integer)
   )
   C: “” cumulative sum “ += ” addend “”
   C♯: “” cumulative sum “ += ” addend “”
   JavaScript: “” cumulative sum “ += ” addend “”
   Kotlin: “” cumulative sum “ += ” addend “”
   Swift: “” cumulative sum “ += ” addend “”

  action (clients)
   (
    English: (augend: integer) plus (addend: integer)
   )
   integer
   C: “¤(28)” augend “¤(29) + ¤(28)” addend “¤(29)”
   C♯: “¤(28)” augend “¤(29) + ¤(28)” addend “¤(29)”
   JavaScript: “¤(28)” augend “¤(29) + ¤(28)” addend “¤(29)”
   Kotlin: “¤(28)” augend “¤(29) + ¤(28)” addend “¤(29)”
   Swift: “¤(28)” augend “¤(29) + ¤(28)” addend “¤(29)”

  action (clients)
   (
    English: example augend
   )
   integer
   {
    ← example augend according to additive arithmetic
   }

  action (clients)
   (
    English: example addend
   )
   integer
   {
    ← example addend according to additive arithmetic
   }

  action (clients)
   (
    English: example sum
   )
   integer
   {
    ← example sum according to additive arithmetic
   }
 }

use (clients)
 additive arithmetic with (integer)
 {
  action (clients)
   (
    English: zero
   )
   integer
   C: “0”
   C♯: “0”
   JavaScript: “0”
   Kotlin: “0L”
   Swift: “0”

  action (clients)
   (
    English: one
   )
   integer
   C: “1”
   C♯: “1”
   JavaScript: “1”
   Kotlin: “1L”
   Swift: “1”
 }
