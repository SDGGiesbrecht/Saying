ability (clients)
 (
  English: addition of (number)
  español: adición de (número: [number])
  português: adição de (número: [number])
  français : addition de (nombre: [number])
  Deutsch: Zusammenzählung von (Zahl: [number])
  italiano: addizione di (numero: [number])
  Nederlands: optellen van (getal: [number])
  ελληνικά: πρόθεση (αριθμός: [number])
  עברית: חיבות של (מספר: [number])
 )
 {
  requirement (clients)
   [
    test {
     let (• cumulative sum: number) start as (example augend: number)
     add (example addend: number) to (↓ cumulative sum)
     verify ((cumulative sum) is (example sum: number))
    }
   ]
   (
    English: add (addend: number) to (cumulative sum: ↓ number)
   )

  choice (clients)
   [
    test {verify (((example augend: number) + (example addend: number)) = (example sum: number))}
   ]
   (
    English: (augend: number) plus (addend: number)
    English +: (augend: [augend]) + (addend: [addend])
    español: (primer sumando: [augend]) más (segundo sumando: [addend])
    español +: (primer sumando: [augend]) + (segundo sumando: [addend])
    português: (primeiro sumado: [augend]) mais (segundo sumado: [addend])
    português +: (primeiro sumado: [augend]) + (segundo sumado: [addend])
    français : (cumulande: [augend]) plus (cumulateur: [addend])
    français + : (cumulande: [augend]) + (cumulateur: [addend])
    Deutsch: (erster Summand: [augend]) plus (zweiter Summand: [addend])
    Deutsch: (erster Summand: [augend]) + (zweiter Summand: [addend])
    italiano: (auguendo: [augend]) più (addendo: [addend])
    italiano +: (auguendo: [augend]) + (addendo: [addend])
    Nederlands: (eerste term: [augend]) plus (tweede term: [addend])
    Nederlands +: (eerste term: [augend]) + (tweede term: [addend])
    ελληνικά: (προσθέτης: [augend]) συν (προσθετέος: [addend])
    ελληνικά +: (προσθέτης: [augend]) + (προσθετέος: [addend])
    עברית: (מחובר ראשון: [augend]) ועוד (מחובר שני: [addend])
    עברית +: (מחובר ראשון: [augend]) + (מחובר שני: [addend])
   )
   number
   {
    let (• sum: number) start as (augend)
    add (addend) to (↓ sum)
    ← sum
   }

  requirement (clients)
   (
    English: example augend
   )
   number

  requirement (clients)
   (
    English: example addend
   )
   number

  requirement (clients)
   (
    English: example sum
   )
   number
 }

thing (file)
 (
  English: minimal addition example
 )
 {
  part (file)
   (
    English: number
   )
   natural number
 }

action (file)
 (
  English: minimal addition example wrapping (number: natural number)
 )
 minimal addition example
 create

use (file)
 storage of (minimal addition example)
 {
 }

use (file)
 comparison of (minimal addition example) for equality
 {
  action (file)
   (first: minimal addition example) is (second: minimal addition example)
   truth value
   {
    ← ((number) of (first)) is ((number) of (second))
   }

  action (file)
   example
   minimal addition example
   {
    ← example augend
   }

  action (file)
   differing example
   minimal addition example
   {
    ← example sum
   }
 }

use (file)
 addition of (minimal addition example)
 {
  action (file)
   (
    English: add (addend: minimal addition example) to (cumulative sum: ↓ minimal addition example)
   )
   {
    add ((number) of (addend)) to (↓ (number) of (cumulative sum))
   }

  action (file)
   (
    English: example augend
   )
   minimal addition example
   {
    ← minimal addition example wrapping (example augend: natural number)
   }

  action (file)
   (
    English: example addend
   )
   minimal addition example
   {
    ← minimal addition example wrapping (example addend: natural number)
   }

  action (file)
   (
    English: example sum
   )
   minimal addition example
   {
    ← minimal addition example wrapping (example sum: natural number)
   }
 }
