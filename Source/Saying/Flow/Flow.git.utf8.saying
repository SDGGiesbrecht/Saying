flow (clients)
 (
  English: if (condition: truth value), (consequence: {})
  Deutsch: wenn (Bedingung: [condition]), (Folge: [consequence])
  français : si (condition: [condition]), (conséquence: [consequence])
  ελληνικά: αν (όρος: [condition]), (επακόλουθο: [consequence])
  עברית: אם (תנאי: [condition]), (תוצאה: [consequence])
 )
 C: “if ¤(28)” condition “¤(29) ¤(7B)” consequence “¤(7D)”
 C♯: “if ¤(28)” condition “¤(29) ¤(7B)” consequence “¤(7D)”
 JavaScript: “if ¤(28)” condition “¤(29) ¤(7B)” consequence “¤(7D)”
 Kotlin: “if ¤(28)” condition “¤(29) ¤(7B)” consequence “¤(7D)”
 Swift: “if ” condition “ ¤(7B)” consequence “¤(7D)”

extension
 optional (thing)
 {
  action (clients)
   [
    [
     English: Returns the result of a computation, using caching to improve efficiency upon repeated use.
    ]
    [
     English: This is accomplished by either (A) retrieving a previous result from {cache} (if {cache} is not {nothing}), or (B) executing {compute} and saving the result to {cache} before returning it.
    ]
    parameter: compute
     (
      [
       English: The computation to be evaluated.
      ]
     )
    parameter: cache
     (
      [
       English: The storage in which to cache the result. Declare it in the appropriate scope for the desired cache lifetime. The cache can be reset at any time by setting it to {nothing}.
      ]
     )
    test {
     let (• cache: optional (truth value)) start as (nothing: optional (truth value))
     verify (((true: → truth value), caching in (↓ cache)) is (true))
     verify (((true: → truth value), caching in (↓ cache)) is (true))
    }
   ]
   (
    English: (compute: → thing), caching in (cache: ↓ optional (thing))
    Swift: compute (compute: [compute]) cachingIn (cache: [cache])
   )
   thing
   {
    if (cache) exists, unwrap it as (• cached: thing), {
     ← cached
    }
    let (• result: thing) be (compute: thing)
    change (cache) to (result)
    ← result
   }
 }

action
 [
  test {verify ((true) triggers if)}
  test {verify (not ((false) triggers if))}
 ]
 (
  English: (condition: truth value) triggers if
 )
 truth value
 {
  if (condition), {
   ← true
  }
  ← false
 }

flow
 (
  English: nested flow (condition: truth value) (passed statements: {})
 )
 {
  if (condition), {
   passed statements
  }
 }

action
 [
  test {verify (use nested flow (true))}
  test {verify (not (use nested flow (false)))}
 ]
 (
  English: use nested flow (condition: truth value)
 )
 truth value
 {
  nested flow (condition) {
   ← true
  }
  ← false
 }

flow
 (
  English: indirect if (package: optional (truth value)) exists, unwrap it as (unpacked: truth value), (stuff to do: {})
 )
 {
  if (package) is (something), unwrap it as (unpacked), {
   stuff to do
  }
 }

action
 [
  test {verify (use indirect if with (wrap (true) as (something)))}
  test {verify (not (use indirect if with (nothing)))}
 ]
 (
  English: use indirect if with (branch: optional (truth value))
 )
 truth value
 {
  indirect if (branch) exists, unwrap it as (• contents: truth value), {
   ← contents
  }
  ← false
 }
