ability (clients)
 (
  English: storage of (thing)
 )
 {
 }

extension
 storage of (thing)
 {
  flow (clients)
   [
    test {
     let (• constant: truth value) be (true)
     verify ((constant) is (true))
    }
   ]
   (
    English: let (storage: thing) be (value: thing)
   )
   C: “const ” thing “ ” storage “ = ” value “”
   C♯: “” thing “ ” storage “ = ” value “”
   JavaScript: “const ” storage “ = ” value “”
   Kotlin: “val ” storage “: ” thing “ = ” value “”
   Swift: “let ” storage “: ” thing “ = ” value “”

  flow (clients)
   [
    test {
     let (• variable: truth value) start as (false)
     verify ((variable) is (false))
     change (variable) to (true)
     verify ((variable) is (true))
    }
   ]
   (
    English: let (storage: thing) start as (value: thing)
   )
   C: “” thing “ ” storage “ = ” value “”
   C♯: “” thing “ ” storage “ = ” value “”
   JavaScript: “let ” storage “ = ” value “”
   Kotlin: “var ” storage “: ” thing “ = ” value “”
   Swift: “var ” storage “: ” thing “ = ” value “”

  flow (clients)
   (
    English: change (storage: thing) to (value: thing)
   )
   C: “” storage “ = ” value “”
   C♯: “” storage “ = ” value “”
   JavaScript: “” storage “ = ” value “”
   Kotlin: “” storage “ = ” value “”
   Swift: “” storage “ = ” value “”

  flow (clients)
   (
    English: ignore (result: thing)
    Deutsch: (Ergebnis: [result]) nicht beachten
   )
   C: “” result “”
   C♯: “¤(5F) = ” result “”
   JavaScript: “” result “”
   Kotlin: “” result “”
   Swift: “¤(5F) = ” result “”
 }
