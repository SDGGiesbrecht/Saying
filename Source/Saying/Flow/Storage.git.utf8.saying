ability (clients)
 (
  English: storage of (thing)
 )
 {
 }

extension
 storage of (thing)
 {
  flow (clients)
   [
    test {
     let (• constant: truth value) be (true)
     verify ((constant) is (true))
    }
   ]
   (
    English: let (storage: thing) be (value: thing)
   )
   C: “const ” thing “ ” storage “ = ” value “”
   C♯: “” thing “ ” storage “ = ” value “”
   JavaScript: “const ” storage “ = ” value “”
   Kotlin: “val ” storage “: ” thing “ = ” value “”
   Swift: “let ” storage “: ” thing “ = ” value “”

  flow (clients)
   [
    test {
     let (• variable: truth value) start as (false)
     verify ((variable) is (false))
     change (variable) to (true)
     verify ((variable) is (true))
    }
   ]
   (
    English: let (storage: thing) start as (value: thing)
   )
   C: “” thing “ ” storage “ = ¤(28)” value “¤(29)”
   C♯: “” thing “ ” storage “ = ¤(28)” value “¤(29)”
   JavaScript: “let ” storage “ = ¤(28)” value “¤(29)”
   Kotlin: “var ” storage “: ” thing “ = ¤(28)” value “¤(29)”
   Swift: “var ” storage “: ” thing “ = ¤(28)” value “¤(29)”

  flow (clients)
   (
    English: change (storage: thing) to (value: thing)
   )
   C: “” storage “ = ¤(28)” value “¤(29)”
   C♯: “” storage “ = ¤(28)” value “¤(29)”
   JavaScript: “” storage “ = ¤(28)” value “¤(29)”
   Kotlin: “” storage “ = ¤(28)” value “¤(29)”
   Swift: “” storage “ = ¤(28)” value “¤(29)”
 }

action
 (
  English: make (storage: ↓ truth value) true
 )
 {
  change (storage) to (true)
 }

action
 [
  test {verify (pass through argument)}
 ]
 (
  English: pass through argument
 )
 truth value
 {
  let (• storage: truth value) start as (false)
  make (↓ storage) true
  ← storage
 }
