flow (clients)
 (
  English: if (condition: truth value), (consequence: {})
  Deutsch: wenn (Bedingung: [condition]), (Folge: [consequence])
  français : si (condition: [condition]), (conséquence: [consequence])
  ελληνικά: αν (όρος: [condition]), (επακόλουθο: [consequence])
  עברית: אם (תנאי: [condition]), (תוצאה: [consequence])
 )
 C: “if (” condition “) {” consequence “}”
 C♯: “if (” condition “) {” consequence “}”
 JavaScript: “if (” condition “) {” consequence “}”
 Kotlin: “if (” condition “) {” consequence “}”
 Swift: “if ” condition “ {” consequence “}”

extension
 general containers of (thing)
 {
  action (clients)
   [
    [
     English: Returns the result of a computation, using caching to improve efficiency upon repeated use.
    ]
    [
     English: This is accomplished by either (A) retrieving a previous result from {cache} (if {cache} is not {nothing}), or (B) executing {compute} and saving the result to {cache} before returning it.
    ]
    parameter: compute
     (
      [
       English: The computation to be evaluated.
      ]
     )
    parameter: cache
     (
      [
       English: The storage in which to cache the result. Declare it in the appropriate scope for the desired cache lifetime. The cache can be reset at any time by setting it to {nothing}.
      ]
     )
    test {
     let (• cache: optional (truth value)) start as (nothing: optional (truth value))
     verify (((true: → truth value), caching in (↓ cache)) is (true))
     verify (((true: → truth value), caching in (↓ cache)) is (true))
    }
   ]
   (
    English: (compute: → thing), caching in (cache: ↓ optional (thing))
    Swift: compute (compute: [compute]) cachingIn (cache: [cache])
   )
   thing
   {
    if (cache) exists, unwrap it as (• cached: thing), {
     ← cached
    }
    let (• result: thing) be (compute: thing)
    change (cache) to (result)
    ← result
   }
 }

extension
 use of (list) as list of (element) indexed by (index)
 {
  flow (clients)
   [
    test {
     for each (• element: element) in (non‐empty example: list), {
      ignore (element)
     }
    }
   ]
   (
    English: for each (entry: element) in (sequence: list), (repetition: {})
   )
   C: “const ” list “ list” + “ = ” sequence “;¤(A)const ” index “ end” + “ = ” list “¤(5F)end(list” + “);¤(A)for (” index “ index” + “ = ” list “¤(5F)beginning(list” + “); ” index “¤(5F)less(index” + “, end” + “); ” list “¤(5F)advance¤(5F)to¤(5F)next(¤(26)index” + “, list” + “))¤(A){¤(A)const ” element “ ” entry “ = ” list “¤(5F)entry(index” + “, list” + “);” repetition “}”
   C♯: “...”
   JavaScript: “...”
   Kotlin: “...”
   Swift: “for ” entry “ in ” sequence “ {” repetition “}” [
     “==(¤(5F): ” index “, ¤(5F): ” index “)”
     “<(¤(5F): ” index “, ¤(5F): ” index “)”
     “” list “.startIndex”
     “” list “.endIndex”
     “” list “.subscript(¤(5F): ” index “)”
     “” list “.isEmpty”
     “” list “.index(after: ” index “)”
    ] {
     “extension ” list “: Collection {}”
     “extension ” index “: Comparable {}”
    }
 }

flow (clients)
 [
  test {
   let (• value: truth value) start as (false)
   at clean‐up, {
    verify ((value) is (true))
   }
   change (value) to (true)
  }
 ]
 (
  English: at clean‐up, (clean‐up: {})
  Deutsch: beim Aufräumen (Aufräumen: [clean‐up])
  français : lors du rangement, (rangement: [clean‐up])
  ελληνικά: στη συγύρισμα (συγύρισμα: [clean‐up])
 )
 C: “” − “” clean‐up “”
 C♯: “try {” − “} finally {” clean‐up “}”
 JavaScript: “try {” − “} finally {” clean‐up “}”
 Kotlin: “try {” − “} finally {” clean‐up “}”
 Swift: “defer {” clean‐up “}”

action (file)
 [
  test {verify (avoid dead end)}
 ]
 (
  English: avoid dead end
 )
 truth value
 {
  if (false), {
   !
  }
  if (true), {
   ← true
  }
  ¡!
 }
