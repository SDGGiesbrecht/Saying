extension
 comparison of (thing) for equality
 {
  thing (clients)
   (
    English: set of (thing)
    Deutsch: Menge von (Ding: [thing])
    français : ensemble de (chose: [thing])
    ελληνικά: σύνολο (πράγμα: [thing])
    עברית: קבוצה של (דבר: [thing])
   )
   C: “GHashTable¤(2A)”/“g¤(5F)hash¤(5F)table¤(5F)ref(” set “)”/“g¤(5F)hash¤(5F)table¤(5F)unref(” set “)” (“glib¤(2D)2.0”)
   C♯: “HashSet<” thing “>” (“System.Collections.Generic”) [
     “override ” thing “.Equals(” thing “)”
     “override ” thing “.GetHashCode()”
    ]
   Kotlin: “Set<” thing “>” [
     “override ” thing “.equals(” thing “)”
     “override ” thing “.hashCode()”
    ]
   Swift: “Set<” thing “>” [
     “==(¤(5F): ” thing “, ¤(5F): ” thing “)”
     “” thing “.hash(into: Hasher)”
    ] {
     “extension ” thing “: Hashable {}”
    }
   {
   }

  use (clients)
   general containers of (set of (thing))
   {
    action (clients)
     example
     set of (thing)
     {
      ← empty
     }
   }

  action (clients)
   (
    English: empty
    Deutsch: leer
    français : vide
    ελληνικά: άδειος
   )
   set of (thing)
   C: “g¤(5F)hash¤(5F)table¤(5F)new(” thing “” ‐ “¤(5F)hash¤(5F)reference, ” thing “” ‐ “¤(5F)equal¤(5F)reference)” [
     “” thing “” ‐ “¤(5F)hash(” thing “)”
     “” thing “” ‐ “¤(5F)equal(” thing “, ” thing “)”
    ] {
     “guint ” thing “” ‐ “¤(5F)hash¤(5F)reference(” thing “¤(2A) element)¤(A){¤(A)return ” thing “” ‐ “¤(5F)hash(¤(2A)element);¤(A)}”
     “bool ” thing “” ‐ “¤(5F)equal¤(5F)reference(” thing “¤(2A) first, ” thing “¤(2A) second)¤(A){¤(A)return ” thing “” ‐ “¤(5F)equal(¤(2A)first, ¤(2A)second);¤(A)}”
    }
   C♯: “new HashSet<” thing “>()”
   Kotlin: “setOf()”
   Swift: “[]”
   create
 }
