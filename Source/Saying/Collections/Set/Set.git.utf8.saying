extension
 hashing (key)
 {
  thing (clients)
   (
    English: set of (key)
    Deutsch: Menge von (Schlüssel: [key])
    français : ensemble de (clé: [key])
    ελληνικά: σύνολο (κλειδί: [key])
    עברית: קבוצה של (מפתח: [key])
   )
   C: “GHashTable¤(2A)”/“g¤(5F)hash¤(5F)table¤(5F)ref(” set “)”/“g¤(5F)hash¤(5F)table¤(5F)unref(” set “)” (“glib¤(2D)2.0”)
   C♯: “HashSet<” key “>” (“System.Collections.Generic”) [
     “override ” key “.Equals(” key “)”
     “override ” key “.GetHashCode()”
    ]
   Kotlin: “Set<” key “>” [
     “override ” key “.equals(” key “)”
     “override ” key “.hashCode()”
    ]
   Swift: “Set<” key “>” [
     “==(¤(5F): ” key “, ¤(5F): ” key “)”
     “” key “.hash(into: Hasher)”
    ] {
     “extension ” key “: Hashable {}”
    }
   {
   }

  use (clients)
   general containers of (set of (key))
   {
    action (clients)
     example
     set of (key)
     {
      ← empty
     }
   }

  action (clients)
   (
    English: empty
    Deutsch: leer
    français : vide
    ελληνικά: άδειος
   )
   set of (key)
   C: “g¤(5F)hash¤(5F)table¤(5F)new(” key “¤(5F)hash¤(5F)reference, ” key “¤(5F)equal¤(5F)reference)” [
     “” key “” ‐ “¤(5F)hash(” key “)”
     “” key “” ‐ “¤(5F)equal(” key “, ” key “)”
    ] {
     “guint ” key “¤(5F)hash¤(5F)reference(” key “¤(2A) element)¤(A){¤(A)return ” key “¤(5F)hash(¤(2A)element);¤(A)}”
     “bool ” key “¤(5F)equal¤(5F)reference(” key “¤(2A) first, ” key “¤(2A) second)¤(A){¤(A)return ” key “¤(5F)equal(¤(2A)first, ¤(2A)second);¤(A)}”
    }
   C♯: “new HashSet<” key “>()”
   Kotlin: “setOf()”
   Swift: “[]”
   create
 }
