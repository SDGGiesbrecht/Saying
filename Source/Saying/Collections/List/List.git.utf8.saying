extension
 general containers of (thing)
 {
  thing (clients)
   (
    English: list of (thing)
    Deutsch: Liste von (Ding: [thing])
    français : liste de (chose: [thing])
    ελληνικά: κατάλογος (πράγμα: [thing])
    עברית: רשימה של (דבר: [thing])
   )
   C: “GArray¤(2A)”/“g¤(5F)array¤(5F)ref(” array “)”/“g¤(5F)array¤(5F)unref(” array “)” (“glib¤(2D)2.0”)
   C♯: “List<” thing “>” (“System.Collections.Generic”)
   Kotlin: “List<” thing “>”
   Swift: “[” thing “]”
   {
   }

  use (clients)
   use of (list of (thing)) as list of (thing) indexed by (list index) separated by (list boundary)
   {
    action (clients)
     (
      English: index after (boundary: list boundary) in (list: list of (thing)) skipping bounds check
     )
     list index
     C: “” boundary “”
     C♯: “” boundary “”
     JavaScript: “” boundary “”
     Kotlin: “” boundary “”
     Swift: “” boundary “”

    action (clients)
     (
      English: beginning of (list: list of (thing))
     )
     list boundary
     C: “0”
     C♯: “0”
     JavaScript: “0”
     Kotlin: “0”
     Swift: “” list “.startIndex”

    action (clients)
     (
      English: end of (list: list of (thing))
     )
     list boundary
     C: “” list “¤(2D)>len”
     C♯: “” list “.Count”
     JavaScript: “” list “.length”
     Kotlin: “” list “.size”
     Swift: “” list “.endIndex”

    action (clients)
     (
      English: advance (cursor: ↓ list boundary) to next in (list: list of (thing)) skipping bounds check
     )
     C: “++” cursor “”
     C♯: “++” cursor “”
     JavaScript: “++” cursor “”
     Kotlin: “++” cursor “”
     Swift: “” list “.formIndex(after: ¤(26)” cursor “)”

    action (clients)
     (
      English: boundary after (cursor: list boundary) in (list: list of (thing)) skipping bounds check
     )
     list boundary
     C: “” cursor “ + 1”
     C♯: “” cursor “ + 1”
     JavaScript: “” cursor “ + 1”
     Kotlin: “” cursor “ + 1”
     Swift: “” list “.index(after: ” cursor “)”

    action (clients)
     (
      English: entry at (cursor: list index) in (list: list of (thing))
     )
     thing
     C: “g¤(5F)array¤(5F)index(” list “, ” thing “, ” cursor “)”
     C♯: “” list “[” cursor “]”
     JavaScript: “” list “[” cursor “]”
     Kotlin: “” list “[” cursor “]”
     Swift: “” list “[” cursor “]”

    action (clients)
     (
      English: entry after (cursor: list boundary) in (list: list of (thing)) skipping bounds check
     )
     thing
     C: “g¤(5F)array¤(5F)index(” list “, ” thing “, ” cursor “)”
     C♯: “” list “[” cursor “]”
     JavaScript: “” list “[” cursor “]”
     Kotlin: “” list “[” cursor “]”
     Swift: “” list “[” cursor “]”

    action (clients)
     (
      English: first in (list: list of (thing))
     )
     optional (thing)
     Kotlin: “” list “.firstOrNull()”
     Swift: “” list “.first”
     {
      ← first in (list) according to default use as list
     }

    action (clients)
     (
      English: (list: list of (thing)) is empty
     )
     truth value
     Kotlin: “” list “.isEmpty()”
     Swift: “” list “.isEmpty”
     {
      ← (list) is empty according to default use as list
     }

    action (clients)
     (
      English: (list: list of (thing)) is not empty
     )
     truth value
     Kotlin: “” list “.isNotEmpty()”
     {
      ← (list) is not empty according to default use as list
     }

    action (clients)
     (
      English: empty
     )
     list of (thing)
     C: “g¤(5F)array¤(5F)new(FALSE, FALSE, sizeof(” thing “))”
     C♯: “new List<” thing “>()”
     JavaScript: “[]”
     Kotlin: “listOf()”
     Swift: “[]”

    action (clients)
     (
      English: non‐empty example
     )
     list of (thing)
     {
      ← non‐empty example according to use as changeable list
     }
   }

  use (clients)
   use of (list of (thing)) as changeable list of (thing) indexed by (list index) separated by (list boundary)
   {
    action (clients)
     (
      English: append (element: thing) to (list: ↓ list of (thing))
     )
     C: “g¤(5F)array¤(5F)append¤(5F)val(” list “, ” element “)”
     C♯: “” list “.Add(” element “)”
     JavaScript: “” list “.push(” element “)”
     Kotlin: “” list “ += listOf(” element “)”
     Swift: “” list “.append(” element “)”
   }
 }
