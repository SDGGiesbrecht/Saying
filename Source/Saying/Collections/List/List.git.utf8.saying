ability (clients)
 (
  English: lists of (element)
  Deutsch: Listen von (Element: [element])
  français : listes de (élément: [element])
  ελληνικά: κατάλογοι (στοιχείο: [element])
  עברית: רשימות של (איבר: [element])
 )
 {
  requirement (clients)
   [
    [
     English: An arbitrary example element intended for use in tests.
    ]
   ]
   example element
   element
 }

extension
 lists of (element)
 {
  thing (clients)
   (
    English: list of (element)
    Deutsch: Liste von (Element: [element])
    français : liste de (élément: [element])
    ελληνικά: κατάλογος (στοιχείο: [element])
    עברית: רשימה של (איבר: [element])
   )
   C: “GArray¤(2A)”/“g¤(5F)array¤(5F)ref”/“g¤(5F)array¤(5F)unref” (“glib¤(2D)2.0”)
   C♯: “List<” element “>” (“System.Collections.Generic”)
   Kotlin: “List<” element “>”
   Swift: “[” element “]”
   {
   }

  use (clients)
   storage of (element)
   {
   }

  use (clients)
   storage of (list of (element))
   {
   }

  use
   use of (list of (element)) as list of (element) indexed by (list index)
   {
    action (clients)
     (
      English: beginning of (list: list of (element))
     )
     list index
     {
      ← list index at (platform index at beginning of (list))
     }

    action (clients)
     (
      English: end of (list: list of (element))
     )
     list index
     {
      ← list index at (platform index at end of (list))
     }

    action (clients)
     (
      English: index after (index: list index) in (list: list of (element))
     )
     list index
     {
      ← list index at (platform index after ((platform index) of (index)) in (list))
     }

    action (clients)
     (
      English: entry at (index: list index) in (list: list of (element))
     )
     element
     {
      ← entry at ((platform index) of (index: list index)) in (list)
     }

    action (clients)
     (
      English: (list: list of (element)) is empty
     )
     truth value
     Kotlin: “” list “.isEmpty()”
     Swift: “” list “.isEmpty”
     {
      ← (list) is empty according to default use as list
     }

    action (clients)
     (
      English: (list: list of (element)) is not empty
     )
     truth value
     Kotlin: “” list “.isNotEmpty()”
     {
      ← (list) is not empty according to default use as list
     }

    action (clients)
     (
      English: non‐empty example
     )
     list of (element)
     {
      ← non‐empty example according to use as changeable list
     }
   }

  action (file)
   (
    English: platform index at beginning of (list: list of (element))
   )
   platform fixed‐width integer
   C: “0”
   C♯: “0”
   JavaScript: “0”
   Kotlin: “0”
   Swift: “” list “.startIndex”

  action (file)
   (
    English: platform index at end of (list: list of (element))
   )
   platform fixed‐width integer
   C: “” list “¤(2D)>len”
   C♯: “” list “.Count”
   JavaScript: “” list “.length”
   Kotlin: “” list “.size”
   Swift: “” list “.endIndex”

  action (file)
   (
    English: platform index after (index: platform fixed‐width integer) in (list: list of (element))
   )
   platform fixed‐width integer
   C: “” index “ + 1”
   C♯: “” index “ + 1”
   JavaScript: “” index “ + 1”
   Kotlin: “” index “ + 1”
   Swift: “” list “.index(after: ” index “)”

  action (file)
   (
    English: entry at (index: platform fixed‐width integer) in (list: list of (element))
   )
   element
   C: “g¤(5F)array¤(5F)index(” list “, ” element “, ” index “)”
   C♯: “” list “[” index “]”
   JavaScript: “” list “[” index “]”
   Kotlin: “” list “[” index “]”
   Swift: “” list “[” index “]”

  use
   use of (list of (element)) as changeable list of (element) indexed by (list index)
   {
    action (clients)
     (
      English: empty
     )
     list of (element)
     C: “g¤(5F)array¤(5F)new(FALSE, FALSE, sizeof(” element “))”
     C♯: “new List<” element “>()”
     JavaScript: “[]”
     Kotlin: “listOf()”
     Swift: “[]”

    action (clients)
     (
      English: append (element: element) to (list: ↓ list of (element))
     )
     C: “g¤(5F)array¤(5F)append¤(5F)val(” list “, ” element “)”
     C♯: “” list “.Add(” element “)”
     JavaScript: “” list “.push(” element “)”
     Kotlin: “” list “ += ” element “”
     Swift: “” list “.append(” element “)”
   }
 }
