extension
 use of (list) as list of (element) indexed by (index)
 {
  thing (unit)
   [
    test {
     let (• iterator: (list) iterator) start as (iterator for (non‐empty example: list))
     ignore (advance (↓ iterator) checking for validity)
     ignore (current entry of (iterator))
     ignore (advance (↓ iterator) checking for validity)
    }
   ]
   (
    English: (list) iterator
   )
   {
    part (file)
     (
      English: list
     )
     list

    part (file)
     (
      English: index
     )
     optional (index)
   }

  action (file)
   (
    English: iterator for (list: list) starting at (index: optional (index))
   )
   (list) iterator
   create

  use
   general use of ((list) iterator)
   {
   }

  action (unit)
   (
    English: iterator for (list: list)
    C♯: (this: [list]).GetEnumerator
   )
   (list) iterator
   {
    ← iterator for (list) starting at (nothing: optional (index))
   }

  action (unit)
   (
    English: advance (iterator: ↓ (list) iterator) checking for validity
    C♯: (this: [iterator]).MoveNext
   )
   truth value
   {
    if ((index) of (iterator)) exists, unwrap it as (• cursor: index), {
     change (↓ (index) of (iterator)) to (index after (cursor) in ((list) of (iterator)))
     ← (cursor) is less than (end of ((list) of (iterator)))
    }
    change (↓ (index) of (iterator)) to (beginning of ((list) of (iterator)))
    ← ((list) of (iterator)) is not empty
   }

  action (unit)
   (
    English: current entry of (iterator: (list) iterator)
    C♯: get (this: [iterator]).Current
   )
   element
   {
    if ((index) of (iterator)) exists, unwrap it as (• cursor: index), {
     ← entry at (cursor) in ((list) of (iterator))
    }
    !
   }
 }
