ability (clients)
 (
  English: use of (list) as list of (element) indexed by (index)
 )
 {
  requirement (clients)
   (
    English: beginning of (list: list)
    Deutsch: Anfang von (Liste: [list])
    français : début de (liste: [list])
    ελληνικά: αρχή (κατάλογος: [list])
    Swift: var (self: [list]).startIndex
   )
   index

  requirement (clients)
   [
    test {
     let (• non‐empty: list) be (non‐empty example: list)
     verify ((beginning of (non‐empty)) is not (end of (non‐empty)))
    }
   ]
   (
    English: end of (list: list)
    Deutsch: Ende von (Liste: [list])
    français : fin de (liste: [list])
    ελληνικά: τέλος (κατάλογος: [list])
    Swift: var (self: [list]).endIndex
   )
   index

  requirement (clients)
   [
    test {
     let (• non‐empty: list) be (non‐empty example: list)
     let (• beginning: index) be (beginning of (non‐empty))
     verify ((index after (beginning) in (non‐empty)) is not (beginning))
    }
   ]
   (
    English: index after (index: index) in (list: list)
    Deutsch : Index nach (Index: [index]) in (Liste: [list])
    français : indice après (indice: [index]) dans (liste: [list])
    ελληνικά: δείκτης μετά (δείκτης: [index]) σε (κατάλογος: [list])
    Swift: (self: [list]).index after (i: [index])
   )
   index

  requirement (clients)
   [
    test {
     let (• non‐empty: list) be (non‐empty example: list)
     ignore (entry at (beginning of (non‐empty)) in (non‐empty))
    }
   ]
   (
    English: entry at (index: index) in (list: list)
    Swift: (self: [list]).subscript (position: [index])
   )
   element

  choice (clients)
   [
    test {
     verify ((first in (non‐empty example: list)) exists)
    }
   ]
   (
    English: first in (list: list)
    Deutsch: erster in (Liste: [list])
    français : premier dans (liste: [list])
    ελληνικά: πρώτος σε (κατάλογος: [list])
    Swift: var (self: [list]).first
   )
   optional (element)
   Swift: “” list “.first” [
     “==(¤(5F): ” index “, ¤(5F): ” index “)”
     “<(¤(5F): ” index “, ¤(5F): ” index “)”
     “” list “.startIndex”
     “” list “.endIndex”
     “” list “.subscript(¤(5F): ” index “)”
     “” list “.isEmpty”
     “” list “.index(after: ” index “)”
    ] {
     “extension ” list “: Collection {}”
     “extension ” index “: Comparable {}”
    }
   {
    ← first in (list) according to default use as list
   }

  choice (clients)
   [
    test {
     verify (not ((non‐empty example: list) is empty))
    }
   ]
   (
    English: (list: list) is empty
    Deutsch: (Liste: [list]) ist leer
    français : (liste: [list]) est vide
    ελληνικά: (κατάλογος: [list]) είναι άδειος
    Swift: var (self: [list]).isEmpty
   )
   truth value
   Swift: “” list “.isEmpty” [
     “==(¤(5F): ” index “, ¤(5F): ” index “)”
     “<(¤(5F): ” index “, ¤(5F): ” index “)”
     “” list “.startIndex”
     “” list “.endIndex”
     “” list “.subscript(¤(5F): ” index “)”
     “” list “.index(after: ” index “)”
    ] {
     “extension ” list “: Collection {}”
     “extension ” index “: Comparable {}”
    }
   {
    ← (list) is empty according to default use as list
   }

  choice (clients)
   [
    test {
     verify ((non‐empty example: list) is not empty)
    }
   ]
   (
    English: (list: list) is not empty
    Deutsch: (Liste: [list]) ist nicht leer
    français : (liste: [list]) n’est pas vide
    ελληνικά: (κατάλογος: [list]) δεν είναι άδειος
   )
   truth value
   {
    ← (list) is not empty according to default use as list
   }

  requirement (clients)
   (
    English: non‐empty example
   )
   list
 }

extension
 use of (list) as list of (element) indexed by (index)
 {
  use (clients)
   general use of (list)
   {
   }
 }

extension
 use of (list) as list of (element) indexed by (index)
 {
  action (clients)
   [
    test {
     verify ((first in (non‐empty example: list) according to default use as list) exists)
    }
   ]
   (
    English: first in (list: list) according to default use as list
   )
   optional (element)
   {
    if ((list) is empty), {
     ← nothing
    }
    ← wrap (entry at (beginning of (list)) in (list)) into optional
   }

  action (clients)
   [
    test {
     verify (not ((non‐empty example: list) is empty according to default use as list))
    }
   ]
   (
    English: (list: list) is empty according to default use as list
   )
   truth value
   {
    ← (end of (list)) is (beginning of (list))
   }

  action (clients)
   [
    test {
     verify ((non‐empty example: list) is not empty according to default use as list)
    }
   ]
   (
    English: (list: list) is not empty according to default use as list
   )
   truth value
   {
    ← not ((list) is empty)
   }
 }

thing (file)
 (
  English: minimal list example
 )
 {
  part (file)
   (
    English: wrapped list
   )
   list of (truth value)
 }

action (file)
 (
  English: minimal list example wrapping (wrapped list: list of (truth value))
 )
 minimal list example
 create

use
 use of (minimal list example) as list of (truth value) indexed by (list index)
 {
  action (file)
   (
    English: beginning of (list: minimal list example)
   )
   list index
   {
    ← beginning of ((wrapped list) of (list))
   }

  action (file)
   (
    English: end of (list: minimal list example)
   )
   list index
   {
    ← end of ((wrapped list) of (list))
   }

  action (file)
   (
    English: index after (index: list index) in (list: minimal list example)
   )
   list index
   {
    ← index after (index) in ((wrapped list) of (list))
   }

  action (file)
   (
    English: entry at (index: list index) in (list: minimal list example)
   )
   truth value
   {
    ← entry at (index) in ((wrapped list) of (list))
   }

  action (file)
   (
    English: non‐empty example
   )
   minimal list example
   {
    ← minimal list example wrapping (non‐empty example: list of (truth value))
   }
 }

action (file)
 [
  test {
   verify ((first in (empty minimal list example) according to default use as list) does not exist)
  }
 ]
 (
  English: empty minimal list example
 )
 minimal list example
 {
  ← minimal list example wrapping (empty: list of (truth value))
 }
