ability (clients)
 (
  English: use of (list) as list of (element) indexed by (index)
 )
 {
  requirement (clients)
   (
    English: beginning of (list: list)
    Deutsch: Anfang von (Liste: [list])
    français : début de (liste: [list])
    ελληνικά: αρχή (κατάλογος: [list])
   )
   index

  requirement (clients)
   [
    test {
     let (• non‐empty: list) be (non‐empty example: list)
     verify ((beginning of (non‐empty)) is not (end of (non‐empty)))
    }
   ]
   (
    English: end of (list: list)
    Deutsch: Ende von (Liste: [list])
    français : fin de (liste: [list])
    ελληνικά: τέλος (κατάλογος: [list])
   )
   index

  requirement (clients)
   [
    test {
     let (• non‐empty: list) be (non‐empty example: list)
     let (• beginning: index) be (beginning of (non‐empty))
     verify ((index after (beginning) in (non‐empty)) is not (beginning))
    }
   ]
   (
    English: index after (index: index) in (list: list)
    Deutsch : Index nach (Index: [index]) in (Liste: [list])
    français : indice après (indice: [index]) dans (liste: [list])
    ελληνικά: δείκτης μετά (δείκτης: [index]) σε (κατάλογος: [list])
   )
   index

  requirement (clients)
   [
    test {
     let (• non‐empty: list) be (non‐empty example: list)
     ignore (entry at (beginning of (non‐empty)) in (non‐empty))
    }
   ]
   (
    English: entry at (index: index) in (list: list)
   )
   element

  choice (clients)
   [
    test {
     verify (not ((non‐empty example: list) is empty))
    }
   ]
   (
    English: (list: list) is empty
    Deutsch: (Liste: [list]) ist leer
    français : (liste: [list]) est vide
    ελληνικά: (κατάλογος: [list]) είναι άδειος
   )
   truth value
   {
    ← (beginning of (list)) is (end of (list))
   }

  requirement (clients)
   (
    English: non‐empty example
   )
   list
 }
