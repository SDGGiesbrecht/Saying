ability (clients)
 (
  English: comparison of (thing) for equality
  Deutsch: Vergleich von (Ding: [thing]) auf Gleichheit
 )
 {
  requirement (clients)
   [
    [
     English: Compares two values for equality.
    ]
    parameter: first
     (
      [
       English: A value.
       Deutsch: Eine Wert.
      ]
     )
    parameter: second
     (
      [
       English: Another value.
       Deutsch: Eine weitere Wert.
      ]
     )
   ]
   (
    English: (first: thing) is (second: thing)
    English +: (first: [first]) = (second: [second])
    Deutsch: (erste: [first]) ist (zweite: [second])
    Deutsch +: (erste: [first]) = (zweite: [second])
    français : (première: [first]) est (deuxième: [second])
    français +: (première: [first]) = (deuxième: [second])
    ελληνικά: (πρώτη: [first]) είναι (δεύτερα: [second])
    ελληνικά +: (πρώτη: [first]) = (δεύτερα: [second])
    עברית: (ראשון: [first]) (שני: [second])
    עברית +: (ראשון: [first]) = (שני: [second])
   )
   truth value

  choice (clients)
   [
    [
     English: Compares two values for inequality.
    ]
    parameter: first
     (
      [
       English: A truth value.
       Deutsch: Eine Wahrheitswert.
      ]
     )
    parameter: second
     (
      [
       English: Another truth value.
       Deutsch: Eine weitere Wahrheitswert.
      ]
     )
   ]
   (
    English: (first: thing) is not (second: thing)
    English +: (first: [first]) ≠ (second: [second])
    Deutsch: (erste: [first]) ist nicht (zweite: [second])
    Deutsch +: (erste: [first]) ≠ (zweite: [second])
    français : (première: [first]) n’est pas (deuxième: [second])
    français +: (première: [first]) ≠ (deuxième: [second])
    ελληνικά: (πρώτη: [first]) δεν είναι (δεύτερα: [second])
    ελληνικά +: (πρώτη: [first]) ≠ (δεύτερα: [second])
    עברית: (ראשון: [first]) לא (שני: [second])
    עברית +: (ראשון: [first]) ≠ (שני: [second])
   )
   truth value
   {
    not ((first) is (second))
   }
 }

thing
 [
  test (verify ((example) is (example)))
  test (verify (((example) is (differing example)) is (false)))
  test (verify ((example) is not (differing example)))
  test (verify (((example) is not (example)) is (false)))
 ]
 (
  English: equality example
 )
 C: bool (stdbool)
 C♯: bool
 Kotlin: Boolean
 Swift: Bool

use
 comparison of (equality example) for equality
 {
  action
   (first: equality example) is (second: equality example)
   truth value
   C: “¤(28)” first “ == ” second “¤(29)”
   C♯: “¤(28)” first “ == ” second “¤(29)”
   JavaScript: “¤(28)” first “ == ” second “¤(29)”
   Kotlin: “¤(28)” first “ == ” second “¤(29)”
   Swift: «¤(28)» first “ == ” second „¤(29)“
 }

action
 (
  English: example
 )
 truth value
 C: “¤(28)true¤(29)” (stdbool)
 C♯: “¤(28)true¤(29)”
 JavaScript: “¤(28)true¤(29)”
 Kotlin: “¤(28)true¤(29)”
 Swift: “¤(28)true¤(29)”

action
 (
  English: differing example
 )
 truth value
 C: “¤(28)false¤(29)” (stdbool)
 C♯: “¤(28)false¤(29)”
 JavaScript: “¤(28)false¤(29)”
 Kotlin: “¤(28)false¤(29)”
 Swift: “¤(28)false¤(29)”
